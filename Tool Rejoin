import os
import requests
import json
import time
import subprocess
import asyncio
import aiohttp
import threading
import psutil
import crypto
import platform
import uuid 
import hashlib
import sqlite3
import shutil
import signal
from colorama import init, Fore, Style
from threading import Lock

init()

SERVER_LINKS_FILE = "AXPrivate_Server_Link.txt"
ACCOUNTS_FILE = "AXAccount.txt"
CONFIG_FILE = "AXConfig.json"
webhook_url = None
device_name = None
interval = None
stop_webhook_thread = False
webhook_thread = None
status_lock = Lock()
rejoin_lock = Lock()
package_statuses = {}
username_cache = {}
CACHE_FILE = "username_cache.json"
cache_save_interval = 600  
stop_event = threading.Event()
    
executors = {
    "Fluxus": "/storage/emulated/0/Fluxus/",
    "Codex": "/storage/emulated/0/Codex/",
    "Arceus X": "/storage/emulated/0/Arceus X/",
    "Delta": "/storage/emulated/0/Delta/",
    "Cryptic": "/storage/emulated/0/Cryptic/"
}

workspace_paths = []

for executor, base_path in executors.items():
    workspace_paths.append(f"{base_path}Workspace")   # Uppercase 'W'
    workspace_paths.append(f"{base_path}workspace")   # Lowercase 'w'

    
lua_script_template = '''
local GuiService = game:GetService("GuiService")
local Players = game:GetService("Players")
local os_time = os.time()

getgenv().StopUpdate = false

GuiService.ErrorMessageChanged:Connect(function()
    local Code = GuiService:GetErrorCode().Value
    if Code >= Enum.ConnectionError.DisconnectErrors.Value then
        getgenv().StopUpdate = true
    end
end)

repeat wait() until game.JobId ~= nil

local function writeExecutorStatus(status)
    local username = Players.LocalPlayer.Name  -- Get the player's username
    pcall(function() 
        writefile("executor_check_" .. username .. ".txt", status .. ":" .. os_time)  -- username and timestamp
    end)
end

writeExecutorStatus("working")

while wait(1) do
    if not getgenv().StopUpdate and Players.LocalPlayer and Players.LocalPlayer:FindFirstChild("PlayerScripts") then 
        -- Continuously update the working status
        writeExecutorStatus("working")
    end
end
'''

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def print_rainbow_header():
    header = r"""
___________.__                     __   .__                   __________              __         .__         
\_   _____/|  |    ____  _____   _/  |_ |__|  ____     ____   \______   \  ____      |__|  ____  |__|  ____  
 |    __)  |  |   /  _ \ \__  \  \   __\|  | /    \   / ___\   |       _/_/ __ \     |  | /  _ \ |  | /    \ 
 |     \   |  |__(  <_> ) / __ \_ |  |  |  ||   |  \ / /_/  >  |    |   \\  ___/     |  |(  <_> )|  ||   |  \
 \___  /   |____/ \____/ (____  / |__|  |__||___|  / \___  /   |____|_  / \___  >/\__|  | \____/ |__||___|  /
     \/                       \/                 \/ /_____/           \/      \/ \______|                 \/          
"""
    colors = [Fore.RED, Fore.YELLOW, Fore.GREEN, Fore.CYAN, Fore.BLUE, Fore.MAGENTA]
    color_index = 0

    for line in header.splitlines():
        for char in line:
            print(colors[color_index % len(colors)] + char, end='')
            color_index += 1
            if color_index % 10 == 0:
                time.sleep(0.01)  # Hiệu ứng floating nhẹ
        print(Style.RESET_ALL)

    print(Fore.LIGHTMAGENTA_EX + "Created By not.shiroo | Improved By Axionix" + Style.RESET_ALL)

print_rainbow_header()

def detect_and_write_lua_script():
    detected_executors = []

    for executor_name, base_path in executors.items():
        # Define all possible paths for Autoexec/Autoexecute
        possible_autoexec_paths = [
            os.path.join(base_path, "Autoexec"),
            os.path.join(base_path, "Autoexecute")
        ]

        lua_written = False  # To track if Lua file is successfully written

        # Loop through Autoexec and Autoexecute paths
        for path in possible_autoexec_paths:
            if os.path.exists(path):
                # Lua script path
                lua_script_path = os.path.join(path, "executor_check.lua")
                
                try:
                    # Write the Lua script to the detected Autoexec/Autoexecute folder
                    with open(lua_script_path, 'w') as file:
                        file.write(lua_script_template)  # Assume lua_script_template is predefined
                    lua_written = True  # Mark Lua script as written
                    break  # Stop checking further paths once written

                except Exception:
                    pass  # Silently ignore errors

        if lua_written:
            detected_executors.append(executor_name)

    return detected_executors

def reset_executor_file(username):
    """
    Clears any existing executor status file for the given username.
    This ensures a fresh start each time Roblox is launched, only in a valid Workspace path (lowercase or uppercase).
    """
    status_file = f"executor_check_{username}.txt"
    valid_workspace = None  # Will store the valid workspace path once detected

    # Search only in Workspace paths (uppercase 'W' and lowercase 'w')
    for executor, base_path in executors.items():
        for workspace_dir in ["workspace", "Workspace"]:
            workspace_path = os.path.join(base_path, workspace_dir)
            if os.path.exists(workspace_path):
                valid_workspace = workspace_path
                break  # Exit the loop once a valid workspace is found

        if valid_workspace:
            # Clear the status file in the detected workspace
            file_path = os.path.join(valid_workspace, status_file)
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)  # Clear the status file for a fresh start
                    # The print statements have been removed as intended
                except Exception as e:
                    pass  # Ignore the error silently
            break  # Exit the executor loop once the file is removed

def clear_executor_status(username):
    """
    Clears any existing executor status file for the given username.
    This ensures a fresh start each time Roblox is launched, only in a valid Workspace path (lowercase or uppercase).
    """
    status_file = f"executor_check_{username}.txt"
    valid_workspace = None  # Will store the valid workspace path once detected

    # Search only in Workspace paths (uppercase 'W' and lowercase 'w')
    for executor, base_path in executors.items():
        for workspace_dir in ["workspace", "Workspace"]:
            workspace_path = os.path.join(base_path, workspace_dir)
            if os.path.exists(workspace_path):
                valid_workspace = workspace_path
                break  # Exit the loop once a valid workspace is found

        if valid_workspace:
            # Clear the status file in the detected workspace
            file_path = os.path.join(valid_workspace, status_file)
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)  # Clear the status file for a fresh start
                    # The print statements have been removed as intended
                except Exception as e:
                    pass  # Ignore the error silently
            break  # Exit the executor loop once the file is removed

def create_dynamic_menu(options):
    # Determine the maximum width needed for the menu
    max_option_length = max(len(option) + 2 for option in options)  # +2 for number and dot
    
    # Create dynamic menu box
    top_border = f"{Fore.LIGHTCYAN_EX}╔{'═' * (max_option_length + 4)}╗"
    bottom_border = f"╚{'═' * (max_option_length + 4)}╝{Style.RESET_ALL}"
    menu_content = [f"{Fore.LIGHTCYAN_EX}║ {Fore.LIGHTMAGENTA_EX}{i+1}{Fore.LIGHTCYAN_EX}. {option.ljust(max_option_length)} ║" 
                    for i, option in enumerate(options)]
    
    print(top_border)
    for line in menu_content:
        print(line)
    print(bottom_border)

def create_dynamic_table(headers, rows):
    col_widths = [max(len(str(item)) for item in col) for col in zip(headers, *rows)]

    top_border = f"{Fore.LIGHTCYAN_EX}╔" + "╦".join("═" * (width + 2) for width in col_widths) + "╗"
    middle_border = "╠" + "╬".join("═" * (width + 2) for width in col_widths) + "╣"
    bottom_border = f"╚" + "╩".join("═" * (width + 2) for width in col_widths) + "╝" + Style.RESET_ALL

    header_row = "║ " + " ║ ".join(header.ljust(col_widths[i]) for i, header in enumerate(headers)) + " ║"

    data_rows = ["║ " + " ║ ".join(str(row[i]).ljust(col_widths[i]) for i in range(len(headers))) + " ║"
                 for row in rows]

    print(top_border)
    print(header_row)
    print(middle_border)
    for row in data_rows:
        print(row)
    print(bottom_border) 

def handle_exit_signal(signum, frame):
    print(Fore.YELLOW + "Shutting down gracefully..." + Style.RESET_ALL)
    save_cache()  # Save the cache
    stop_event.set()  # Signal threads to stop
    stop_webhook()  # Stop the webhook thread
    if webhook_thread and webhook_thread.is_alive():
        webhook_thread.join()  # Ensure webhook thread is terminated
    exit(0)

def update_status_table(package_statuses):
    clear_screen()
    print_rainbow_header()

    headers = ["Package", "Username", "Status"]
    status_width = 30  
    
    col_widths = [
        max(len(headers[0]), max(len(str(package)) for package in package_statuses.keys())) + 2,
        max(len(headers[1]), max(len(str(info.get("Username", "Unknown"))) for info in package_statuses.values())) + 2,
        status_width  # Fixed width for Status
    ]
    
    top_border = f"{Fore.LIGHTCYAN_EX}╔" + "╦".join("═" * width for width in col_widths) + "╗"
    middle_border = "╠" + "╬".join("═" * width for width in col_widths) + "╣"
    bottom_border = f"╚" + "╩".join("═" * width for width in col_widths) + "╝" + Style.RESET_ALL

    header_row = "║ " + " ║ ".join(header.ljust(col_widths[i] - 1) for i, header in enumerate(headers)) + " ║"
    
    data_rows = []
    for package, info in package_statuses.items():
        row = [
            str(package).ljust(col_widths[0] - 1),
            str(info.get("Username", "Unknown")).ljust(col_widths[1] - 1),
            str(info.get("Status", "")).ljust(col_widths[2] - 1)  # Fixed width for Status
        ]
        data_rows.append("║ " + " ║ ".join(row) + " ║")
    
    print(top_border)
    print(header_row)
    print(middle_border)
    for row in data_rows:
        print(row)
    print(bottom_border)
     
def verify_cookie(cookie_value):
    try:
        # Set the headers with the cookie
        headers = {
            'Cookie': f'.ROBLOSECURITY={cookie_value}',
            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36',
            'Referer': 'https://www.roblox.com/',
            'Origin': 'https://www.roblox.com',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive'
        }

        # Introduce a small delay to mimic a more natural request pattern
        time.sleep(1)

        # Make a GET request to the authentication endpoint
        response = requests.get('https://users.roblox.com/v1/users/authenticated', headers=headers)

        if response.status_code == 200:
            # The user is authenticated
            print(Fore.GREEN + "Your Cookies Are Correct, Your User Is Authenticated." + Style.RESET_ALL)
            return True
        elif response.status_code == 401:
            # Unauthorized, the cookie is invalid
            print(Fore.RED + "An Error Occurred While Verifying Your Cookie!" + Style.RESET_ALL)
            return False
        else:
            # Some other error occurred
            print(Fore.RED + f"An HTTP Error Occurred While Verifying Your Cookie, Status Code Is: {response.status_code} - {response.text}" + Style.RESET_ALL)
            return False

    except Exception as e:
        print(Fore.RED + f"Another Error Occurred While Verifying Your Cookie, Status Code Is: {e}" + Style.RESET_ALL)
        return False
        
def download_file(url, destination, binary=False):
    try:
        response = requests.get(url, stream=True)
        if response.status_code == 200:
            mode = 'wb' if binary else 'w'
            with open(destination, mode) as file:
                if binary:
                    shutil.copyfileobj(response.raw, file)
                else:
                    file.write(response.text)
            print(Fore.GREEN + f"{os.path.basename(destination)} Downloaded Successfully." + Style.RESET_ALL)
            return destination
        else:
            print(Fore.RED + f"An Error Occurred While Downloading the File: {os.path.basename(destination)}." + Style.RESET_ALL)
            return None
    except Exception as e:
        print(Fore.RED + f"Another Error Occurred While Downloading the File: {os.path.basename(destination)}: {e}" + Style.RESET_ALL)
        return None

def replace_cookie_value_in_db(db_path, new_cookie_value):
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # First, check if the .ROBLOSECURITY cookie exists
        cursor.execute("""
            SELECT COUNT(*) FROM cookies WHERE host_key = '.roblox.com' AND name = '.ROBLOSECURITY'
        """)
        cookie_exists = cursor.fetchone()[0]

        if cookie_exists:
            # Update the existing cookie
            cursor.execute("""
                UPDATE cookies
                SET value = ?, last_access_utc = ?, expires_utc = ?
                WHERE host_key = '.roblox.com' AND name = '.ROBLOSECURITY'
            """, (new_cookie_value, int(time.time() * 1000000), 99999999999999999))
        else:
            # Insert the cookie if it doesn't exist
            cursor.execute("""
                INSERT INTO cookies (creation_utc, host_key, name, value, path, expires_utc, is_secure, is_httponly, last_access_utc)
                VALUES (?, '.roblox.com', '.ROBLOSECURITY', ?, '/', 99999999999999999, 0, 0, ?)
            """, (int(time.time() * 1000000), new_cookie_value, int(time.time() * 1000000)))

        conn.commit()
        conn.close()
        print(Fore.GREEN + "Cookie value replaced successfully in the database!" + Style.RESET_ALL)

    except sqlite3.OperationalError as e:
        print(Fore.RED + f"Database error during cookie replacement: {e}" + Style.RESET_ALL)
    except Exception as e:
        print(Fore.RED + f"Error replacing cookie value in database: {e}" + Style.RESET_ALL)

def inject_cookies_and_appstorage():
    db_url = "https://github.com/shirooscripts/auto-rj/raw/main/Cookies"  # Keep this as binary
    appstorage_url = "https://raw.githubusercontent.com/shirooscripts/auto-rj/main/appStorage.json"  # Use this for JSON

    downloaded_db_path = download_file(db_url, "Cookies.db", binary=True)
    downloaded_appstorage_path = download_file(appstorage_url, "appStorage.json", binary=False)

    if not downloaded_db_path or not downloaded_appstorage_path:
        print(Fore.RED + "Failed to download necessary files. Exiting." + Style.RESET_ALL)
        return

    cookie_txt_path = os.path.join(os.getcwd(), "cookie.txt")  # cookie.txt in the same directory as the script
    
    if not os.path.exists(cookie_txt_path):
        print(Fore.RED + "cookie.txt not found in the current directory!" + Style.RESET_ALL)
        return

    with open(cookie_txt_path, "r") as file:
        cookies = [line.strip() for line in file.readlines()]

    if not cookies:
        print(Fore.RED + "No cookies found in cookie.txt. Please add your cookies." + Style.RESET_ALL)
        return

    packages = get_roblox_packages()

    if len(cookies) > len(packages):
        print(Fore.RED + "More cookies in cookie.txt than packages available. Please ensure each cookie has a corresponding package." + Style.RESET_ALL)
        return

    for idx, package_name in enumerate(packages):
        try:
            if idx < len(cookies):
                cookie = cookies[idx]
                
                print(Fore.YELLOW + f"Verifying cookie for {package_name} before injection..." + Style.RESET_ALL)
                if verify_cookie(cookie):
                    print(Fore.GREEN + f"Cookie for {package_name} is valid!" + Style.RESET_ALL)
                else:
                    print(Fore.RED + f"Cookie for {package_name} is invalid. Skipping injection..." + Style.RESET_ALL)
                    continue
                
                print(Fore.GREEN + f"Injecting cookie for {package_name}: {cookie}" + Style.RESET_ALL)
                
                destination_db_dir = f"/data/data/{package_name}/app_webview/Default/"
                destination_appstorage_dir = f"/data/data/{package_name}/files/appData/LocalStorage/"

                os.makedirs(destination_db_dir, exist_ok=True)
                os.makedirs(destination_appstorage_dir, exist_ok=True)

                destination_db_path = os.path.join(destination_db_dir, "Cookies")
                shutil.copyfile(downloaded_db_path, destination_db_path)
                print(Fore.GREEN + f"Copied Cookies.db to {destination_db_path}" + Style.RESET_ALL)

                destination_appstorage_path = os.path.join(destination_appstorage_dir, "appStorage.json")
                shutil.copyfile(downloaded_appstorage_path, destination_appstorage_path)
                print(Fore.GREEN + f"Copied appStorage.json to {destination_appstorage_path}" + Style.RESET_ALL)

                replace_cookie_value_in_db(destination_db_path, cookie)

                print(Fore.YELLOW + f"Verifying cookie for {package_name} after injection..." + Style.RESET_ALL)
                if verify_cookie(cookie):
                    print(Fore.GREEN + f"Cookie for {package_name} is valid after injection!" + Style.RESET_ALL)
                else:
                    print(Fore.RED + f"Cookie for {package_name} is invalid after injection!" + Style.RESET_ALL)

        except Exception as e:
            print(Fore.RED + f"Error injecting cookie for {package_name}: {e}" + Style.RESET_ALL)

    print(Fore.GREEN + "Cookie and appStorage injection completed for all packages." + Style.RESET_ALL) 

def get_roblox_packages():
    packages = []
    suffixes = 'qwertyuiopasdfghjklzxcvbnm'
    
    try:
        output = subprocess.check_output("pm list packages", shell=True, text=True)
    except subprocess.CalledProcessError as e:
        print(Fore.RED + "An Error Occurred While Searching For Package On Your Device!" + Style.RESET_ALL)
        return packages

    for suffix in suffixes:
        package_name = f"com.roblox.clien{suffix}"
        print(Fore.YELLOW + f"Checking Packages On Your Device: {package_name}" + Style.RESET_ALL)
        
        if package_name in output:
            print(Fore.GREEN + f"Package Found On Your Device Is: {package_name}" + Style.RESET_ALL)
            packages.append(package_name)

    return packages

def capture_screenshot():
    # Get the current directory where the script is running
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Create a folder named "screenshots" in the same directory as the script
    screenshots_dir = os.path.join(current_dir, "screenshots")
    os.makedirs(screenshots_dir, exist_ok=True)
    
    # Define the path for the screenshot
    screenshot_path = os.path.join(screenshots_dir, "screenshot.png")
    
    # Check if termux-screenshot command is available
    if shutil.which("termux-screenshot") is None:
        print(Fore.RED + "termux-screenshot command not found or inaccessible." + Style.RESET_ALL)
        return None

    # Capture the screenshot
    result = os.system(f"termux-screenshot -p -o {screenshot_path}")
    
    # Check if the screenshot was successfully captured
    if result != 0 or not os.path.exists(screenshot_path):
        print(Fore.RED + f"Failed to capture screenshot at {screenshot_path}. Skipping this webhook." + Style.RESET_ALL)
        return None

    return screenshot_path


# Function to retrieve system information
def get_system_info():
    cpu_usage = psutil.cpu_percent(interval=1)
    memory_info = psutil.virtual_memory()
    uptime = time.time() - psutil.boot_time()

    system_info = {
        "cpu_usage": cpu_usage,
        "memory_total": memory_info.total,
        "memory_available": memory_info.available,
        "memory_used": memory_info.used,
        "uptime": uptime
    }
    
    return system_info

# Function to load configuration from file
def load_config():
    global webhook_url, device_name, interval
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as file:
            config = json.load(file)
            webhook_url = config.get("webhook_url")
            device_name = config.get("device_name")
            interval = config.get("interval")
    else:
        webhook_url = None
        device_name = None
        interval = None

def save_config():
    config = {
        "webhook_url": webhook_url,
        "device_name": device_name,
        "interval": interval
    }
    with open(CONFIG_FILE, "w") as file:
        json.dump(config, file)

def start_webhook_thread():
    global webhook_thread, stop_webhook_thread
    if webhook_thread is None or not webhook_thread.is_alive():
        stop_webhook_thread = False
        webhook_thread = threading.Thread(target=send_webhook)
        webhook_thread.start()
		
def count_roblox_processes():
    count = 0
    for proc in psutil.process_iter(['name']):
        if 'roblox' in proc.info['name'].lower():
            count += 1
    return count
	
def send_webhook():
    global stop_webhook_thread

    while not stop_webhook_thread:
        # Capture a screenshot
        screenshot_path = capture_screenshot()

        # Check if the screenshot was captured successfully
        if screenshot_path is None or not os.path.exists(screenshot_path):
            print(Fore.RED + f"Screenshot file not found: {screenshot_path}. Skipping this webhook." + Style.RESET_ALL)
            continue  # Skip this iteration if the screenshot doesn't exist

        # Get system information
        system_info = get_system_info()
        roblox_process_count = count_roblox_processes()  # Get the number of open Roblox packages

        # Prepare the embed data
        embed = {
            "title": f"System Info for {device_name}",
            "color": 15258703,
            "fields": [
                {"name": "Device Name", "value": device_name, "inline": True},
                {"name": "CPU Usage", "value": f"{system_info['cpu_usage']}%", "inline": True},
                {"name": "Memory Used", "value": f"{system_info['memory_used'] / system_info['memory_total'] * 100:.2f}%", "inline": True},
                {"name": "Memory Available", "value": f"{system_info['memory_available'] / system_info['memory_total'] * 100:.2f}%", "inline": True},
                {"name": "Total Memory", "value": f"{system_info['memory_total'] / (1024 ** 3):.2f} GB", "inline": True},
                {"name": "Uptime", "value": f"{system_info['uptime'] / 3600:.2f} hours", "inline": True},
                {"name": "Open Roblox Packages", "value": f"{roblox_process_count}", "inline": True}
            ],
            "image": {
                "url": "attachment://screenshot.png"
            }
        }

        # JSON payload
        payload = {
            "embeds": [embed],
            "username": device_name
        }

        try:
            # Sending POST request to the webhook URL with the image as an attachment
            with open(screenshot_path, "rb") as file:
                response = requests.post(
                    webhook_url,
                    data={"payload_json": json.dumps(payload)},
                    files={"file": ("screenshot.png", file)}
                )

            if response.status_code == 204 or response.status_code == 200:
                print(Fore.GREEN + "Webhook sent successfully!" + Style.RESET_ALL)
            else:
                print(Fore.RED + f"Failed to send webhook, status code: {response.status_code}" + Style.RESET_ALL)
        except Exception as e:
            print(Fore.RED + f"Error sending webhook: {e}" + Style.RESET_ALL)

        # Delete the screenshot file silently
        try:
            os.remove(screenshot_path)
        except Exception as e:
            print(Fore.RED + f"Error deleting screenshot file: {e}" + Style.RESET_ALL)

        # Wait for the specified interval before sending the next webhook
        time.sleep(interval * 60)

def stop_webhook():
    global stop_webhook_thread
    stop_webhook_thread = True
    stop_event.set()  # Signal the thread to stop

# Function to prompt for webhook URL, device name, and interval
def setup_webhook():
    global webhook_url, device_name, interval, stop_webhook_thread

    stop_webhook_thread = True  # Stop any existing webhook thread

    webhook_url = input(Fore.GREEN + "Enter the Discord webhook URL: " + Style.RESET_ALL)
    device_name = input(Fore.GREEN + "Enter the device name: " + Style.RESET_ALL) 
    interval = int(input(Fore.GREEN + "Enter the interval in minutes for sending the webhook: " + Style.RESET_ALL))

    save_config()  # Save the configuration

    stop_webhook_thread = False
    threading.Thread(target=send_webhook).start() 

def is_roblox_running(package_name):
    for proc in psutil.process_iter(['name']):
        if package_name in proc.info['name'].lower():
            return True
    return False

def kill_roblox_processes():
    print(Fore.GREEN + "Turning Off All Roblox Games On Your Device..." + Style.RESET_ALL)
    package_names = get_roblox_packages()
    for package_name in package_names:
        print(Fore.YELLOW + f"Roblox Game Shutdown In Progress Package Is: {package_name}" + Style.RESET_ALL)
        os.system(f"pkill -f {package_name}")
    time.sleep(2) 

def kill_roblox_process(package_name):
    print(Fore.YELLOW + f"Roblox Game Shutdown In Progress Package Is: {package_name}" + Style.RESET_ALL)
    os.system(f"pkill -f {package_name}")
    time.sleep(2) 

def launch_roblox(package_name, server_link, num_packages, package_statuses):
    try:
        package_statuses[package_name]["Status"] = Fore.YELLOW +  f"Enabling Roblox Game For Package Is: {package_name}..." + Style.RESET_ALL
        update_status_table(package_statuses)

        subprocess.run(['am', 'start', '-n', f'{package_name}/com.roblox.client.startup.ActivitySplash', '-d', server_link], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(1) 

        package_statuses[package_name]["Status"] = Fore.YELLOW + f"Joining Roblox Game For Package Is: {package_name}..." + Style.RESET_ALL
        update_status_table(package_statuses)
        subprocess.run(['am', 'start', '-n', f'{package_name}/com.roblox.client.ActivityProtocolLaunch', '-d', server_link], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        time.sleep(1)
        
        package_statuses[package_name]["Status"] = Fore.GREEN + "Joined Roblox Game" + Style.RESET_ALL
        update_status_table(package_statuses)

    except Exception as e:
        package_statuses[package_name]["Status"] = Fore.RED + f"An Error Occurred While Enabling Roblox Game For Package Is: {package_name}, Status Code Is: {e}" + Style.RESET_ALL
        update_status_table(package_statuses)
        print(f"Error details: {e}")
        
def get_game_name(game_link_or_id):
    try:
        # Extract the game ID from the link if it's a URL
        if 'roblox.com' in game_link_or_id:
            game_id = game_link_or_id.split('/')[-1]
        else:
            game_id = game_link_or_id

        # Make a request to the Roblox API to get game details
        url = f"https://games.roblox.com/v1/games?universeIds={game_id}"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            game_data = response.json()
            if game_data['data']:
                return game_data['data'][0]['name']
            else:
                return "Unknown Game"
        else:
            return "Failed to retrieve game name"
    except Exception as e:
        print(Fore.RED + f"Error retrieving game name: {e}" + Style.RESET_ALL)
        return "Error"
        
def format_server_link(input_link):
    if 'roblox.com' in input_link:
        return input_link
    elif input_link.isdigit():
        return f'roblox://placeID={input_link}'
    else:
        print(Fore.RED + "Invalid input! Please enter a valid game ID or private server link." + Style.RESET_ALL)
        return None

def save_server_links(server_links):
    with open(SERVER_LINKS_FILE, "w") as file:
        file.writelines(f"{package},{link}\n" for package, link in server_links)

def load_server_links():
    if not os.path.exists(SERVER_LINKS_FILE):
        return []
    
    with open(SERVER_LINKS_FILE, "r") as file:
        return [tuple(line.strip().split(",", 1)) for line in file]

def save_accounts(accounts):
    with open(ACCOUNTS_FILE, "w") as file:
        file.writelines(f"{package},{user_id}\n" for package, user_id in accounts)

def load_accounts():
    if not os.path.exists(ACCOUNTS_FILE):
        return []

    with open(ACCOUNTS_FILE, "r") as file:
        return [tuple(line.strip().split(",", 1)) for line in file]

def find_userid_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            content = file.read()

        userid_start = content.find('"UserId":"')
        if userid_start == -1:
            print("UserId not found")
            return None

        userid_start += len('"UserId":"')
        userid_end = content.find('"', userid_start)
        if userid_end == -1:
            print("UserId end quote not found")
            return None

        return content[userid_start:userid_end]

    except IOError as e:
        print(f"Error reading file: {e}")
        return None

async def get_user_id(username):
    url = "https://users.roblox.com/v1/usernames/users"
    payload = {
        "usernames": [username],
        "excludeBannedUsers": True
    }
    headers = {
        "Content-Type": "application/json"
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as response:
            data = await response.json()
            if 'data' in data and len(data['data']) > 0:
                return data['data'][0]['id']
    return None

def get_server_link(package_name, server_links):
    return next((link for pkg, link in server_links if pkg == package_name), None)

def get_username_from_id(user_id):
    return get_username(user_id) or user_id
    
# Function to get username from user ID
def get_username(user_id):
    retry_attempts = 2
    for attempt in range(retry_attempts):
        try:
            url = f"https://users.roblox.com/v1/users/{user_id}"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            username = data.get("name", "Unknown")
            if username != "Unknown":
                username_cache[user_id] = username
                save_username(user_id, username)
                return username
        except requests.exceptions.RequestException as e:
            print(Fore.RED + f"Attempt {attempt + 1} failed for Roblox Users API: {e}" + Style.RESET_ALL)
            time.sleep(2 ** attempt)  # Exponential backoff

    # Fallback to RoProxy API
    for attempt in range(retry_attempts):
        try:
            url = f"https://users.roproxy.com/v1/users/{user_id}"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            username = data.get("name", "Unknown")
            if username != "Unknown":
                username_cache[user_id] = username
                save_username(user_id, username)
                return username
        except requests.exceptions.RequestException as e:
            print(Fore.RED + f"Attempt {attempt + 1} failed for RoProxy API: {e}" + Style.RESET_ALL)
            time.sleep(2 ** attempt)  # Exponential backoff

    return "Unknown"

# Example of saving the username in a persistent storage
def save_username(user_id, username):
    try:
        if not os.path.exists("usernames.json"):
            with open("usernames.json", "w") as file:
                json.dump({user_id: username}, file)
        else:
            with open("usernames.json", "r+") as file:
                try:
                    data = json.load(file)
                except json.JSONDecodeError:
                    data = {}
                data[user_id] = username
                file.seek(0)
                json.dump(data, file)
                file.truncate()
    except (IOError, json.JSONDecodeError) as e:
        print(Fore.RED + f"Error saving username: {e}" + Style.RESET_ALL)

# Example of loading the username from persistent storage
def load_saved_username(user_id):
    try:
        with open("usernames.json", "r") as file:
            data = json.load(file)
            return data.get(user_id)
    except (FileNotFoundError, json.JSONDecodeError, IOError) as e:
        print(Fore.RED + f"Error loading username: {e}" + Style.RESET_ALL)
        return None
    
def load_cache():
    global username_cache
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, "r") as f:
            username_cache = json.load(f)

# Save the cache to file
def save_cache():
    try:
        temp_file = CACHE_FILE + ".tmp"
        with open(temp_file, "w") as f:
            json.dump(username_cache, f)
        os.replace(temp_file, CACHE_FILE)  # Atomic move to replace the file
    except IOError as e:
        print(Fore.RED + f"Error saving cache: {e}" + Style.RESET_ALL)
        
def check_user_online(user_id):
    max_retries = 3
    delay = 2

    for attempt in range(max_retries):
        try:
            primary_url = "https://presence.roblox.com/v1/presence/users"
            headers = {'Content-Type': 'application/json'}
            body = json.dumps({"userIds": [user_id]})
            with requests.Session() as session:
                primary_response = session.post(primary_url, headers=headers, data=body, timeout=7)
            primary_response.raise_for_status()
            primary_data = primary_response.json()
            primary_presence_type = primary_data["userPresences"][0]["userPresenceType"]
            primary_last_location = primary_data["userPresences"][0].get("lastLocation", None)

            if primary_last_location == "Website":
                print(Fore.YELLOW + f"{user_id} is currently on the Website. Rejoin recommended." + Style.RESET_ALL)
                primary_presence_type = 0  # Set presence type to offline to trigger a rejoin

            return primary_presence_type, primary_last_location

        except requests.exceptions.RequestException as e:
            print(Fore.RED + f"Error checking online status for user {user_id} (Attempt {attempt + 1}): {e}" + Style.RESET_ALL)
            if attempt < max_retries - 1:
                time.sleep(delay)
                delay *= 2  # Exponential backoff
            else:
                return None, None

def get_hwid_file_path(package_name):
    # Specify the directory
    directory = f"/data/data/{package_name}/app_assets/content/"
    
    try:
        # List all files in the directory, excluding directories
        files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]

        if not files:
            print(Fore.RED + "No files found in the specified directory." + Style.RESET_ALL)
            return None

        # Get the last file based on its natural order in the directory
        last_file = files[-1]
        hwid_file_path = os.path.join(directory, last_file)

        return hwid_file_path
            
    except Exception as e:
        print(Fore.RED + f"Error retrieving HWID file path: {e}" + Style.RESET_ALL)
        return None
        
# Function to get HWID for Fluxus
def get_hwid(package_name):
    # Specify the directory
    directory = f"/data/data/{package_name}/app_assets/content/"
    
    try:
        # List all files in the directory, excluding directories
        files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]

        if not files:
            print(Fore.RED + "No files found in the specified directory." + Style.RESET_ALL)
            return None

        # Get the last file based on its natural order in the directory
        last_file = files[-1]
        hwid_file_path = os.path.join(directory, last_file)

        # Read the HWID from the file
        with open(hwid_file_path, "r") as file:
            hwid = file.read().strip()
            print(Fore.GREEN + f"HWID found: {hwid}" + Style.RESET_ALL)
            return hwid
            
    except Exception as e:
        print(Fore.RED + f"Error retrieving HWID: {e}" + Style.RESET_ALL)
        return None

# Function to create bypass link for Fluxus
def create_fluxus_bypass_link(hwid, api_key="XqzyaenZishd33axPYPz"):
    return f"https://madkung.vercel.app/fluxus-api?url=https://flux.li/android/external/start.php?HWID={hwid}&api_key={api_key}"
        
def create_bypass_link(user_id, api_key="shirrobeo"):
    return f"http://103.65.235.193:8264/api/delta?hwid_link=https://gateway.platoboost.com/a/8?id={user_id}&api_key={api_key}"

def decrement_time(time_str):
    hours, minutes = map(int, time_str.replace('H', '').replace('M', '').split())
    
    if minutes > 0:
        minutes -= 1
    elif hours > 0:
        hours -= 1
        minutes = 59
    else:
        # If it's already "0H 0M", it stays the same
        return "0H 0M"
    
    return f"{hours}H {minutes}M"

def bypass_user_ids(accounts, executor_choice, minutes_left_dict=None):
    bypassed_results = []

    for package_name, user_id_or_name in accounts:
        username = user_id_or_name if not user_id_or_name.isdigit() else get_username(user_id_or_name)

        try:
            if executor_choice == "1":  # Delta bypass
                if minutes_left_dict is not None:
                    if package_name not in minutes_left_dict or minutes_left_dict[package_name] == "0H 0M":
                        # Only send a request if minutes_left is not set or is zero or less
                        bypass_link = create_bypass_link(user_id_or_name)

                        try:
                            response = requests.get(bypass_link)
                            if response.status_code == 200:
                                result = response.json()
                                minutes_left = result.get('minutesLeft', '0H 0M')
                                minutes_left_dict[package_name] = minutes_left  # Store the minutes_left value
                                bypassed_results.append((package_name, result))

                                if minutes_left == "0H 0M":
                                    # Re-bypass immediately if minutes left is 0 or less
                                    response = requests.get(bypass_link)
                                    if response.status_code == 200:
                                        bypassed_results.append((package_name, response.json()))
                                        print(Fore.GREEN + f"{username}: Bypass successful with user ID API - {response.json()}" + Style.RESET_ALL)
                                    else:
                                        print(Fore.RED + f"{username}: Bypass failed with status code {response.status_code} using user ID API" + Style.RESET_ALL)
                                else:
                                    print(Fore.YELLOW + f"{username}: Minutes left: {minutes_left}" + Style.RESET_ALL)

                            else:
                                print(Fore.RED + f"{username}: Bypass failed with status code {response.status_code} using user ID API" + Style.RESET_ALL)
                        except Exception as e:
                            print(Fore.RED + f"{username}: Error using user ID API - {str(e)}" + Style.RESET_ALL)
                    else:
                        # Decrement the minutes_left by 1 minute using the decrement_time function
                        minutes_left_dict[package_name] = decrement_time(minutes_left_dict[package_name])
                        print(Fore.YELLOW + f"{username}: Waiting for {minutes_left_dict[package_name]} before rebypass..." + Style.RESET_ALL)

            elif executor_choice == "2":  # Fluxus bypass
                hwid = get_hwid(package_name)
                if hwid:
                    bypass_link = create_fluxus_bypass_link(hwid)
                    try:
                        response = requests.get(bypass_link)
                        if response.status_code == 200:
                            bypassed_results.append((package_name, response.json()))
                            print(Fore.GREEN + f"{username}: Fluxus Bypass successful - {response.json()}" + Style.RESET_ALL)
                        else:
                            print(Fore.RED + f"{username}: Fluxus Bypass failed with status code {response.status_code}" + Style.RESET_ALL)
                    except Exception as e:
                        print(Fore.RED + f"{username}: Error during Fluxus Bypass - {str(e)}" + Style.RESET_ALL)
                else:
                    print(Fore.RED + f"{username}: Failed to retrieve HWID for Fluxus" + Style.RESET_ALL)

        except Exception as bypass_error:
            print(Fore.RED + f"Error during bypass for {package_name}: {bypass_error}" + Style.RESET_ALL)
            # Continue with the rejoin process even if bypass fails.
            continue

    return bypassed_results

detect_and_write_lua_script()
        
# Main function to handle auto rejoin
def main():
    clear_screen() 
    load_config()  # Load configuration at the start
    load_cache()  # Load the cache at the start
    
    print_rainbow_header()
    input(Fore.GREEN + "Press Enter to continue..." + Style.RESET_ALL)    
    while True:
        clear_screen()  # Clear screen each time to avoid overlapping
        print_rainbow_header()  # Always print the header

        # Dynamic menu options
        menu_options = [
            "Start Auto Rejoin Roblox Game",
            "Set User ID For Each Package",
            "Same Game ID Or Private Server Link",
            "Different Private Server Link Or Game ID",
            "Clear User ID And/Or Private Server Link",
            "List",
            "Automatically Set Up All User ID For Roblox Game",
            "Roblox Account Login Using Cookies",            
            "Set Up Webhook",
            "Exit"
        ]

        create_dynamic_menu(menu_options)  # Create the dynamic menu

        setup_type = input(Fore.LIGHTMAGENTA_EX + "Enter choice: " + Style.RESET_ALL)
        
if setup_type == "1":
    server_links = load_server_links()
    accounts = load_accounts()

    if not accounts:
        print(Fore.RED + "No user IDs set up yet! Please set them up before proceeding." + Style.RESET_ALL)
        continue
    elif not server_links:
        print(Fore.RED + "No game ID or private server link set up yet! Please set them up before proceeding." + Style.RESET_ALL)
        continue

    try:
        force_rejoin_interval = int(input("Enter the force rejoin/kill Roblox interval in minutes: ")) * 60
        if force_rejoin_interval <= 0:
            raise ValueError("The interval must be a positive integer.")
    except ValueError as ve:
        print(Fore.RED + f"Invalid input: {ve}. Please enter a valid interval in minutes." + Style.RESET_ALL)
        input(Fore.GREEN + "Press Enter to return to the menu..." + Style.RESET_ALL)
        continue

    if webhook_url and device_name and interval:
        if webhook_thread is None or not webhook_thread.is_alive():
            start_webhook_thread()

    package_statuses = {}
    for package_name, server_link in server_links:
        package_statuses[package_name] = {
            "Status": Fore.LIGHTCYAN_EX + "Initializing" + Style.RESET_ALL,
            "Username": get_username(accounts[server_links.index((package_name, server_link))][1]),
        }

    update_status_table(package_statuses)

    # Kill Roblox processes and wait for 5 seconds
    kill_roblox_processes()
    time.sleep(5)

    num_packages = len(server_links)

    for package_name, server_link in server_links:
        try:
            package_statuses[package_name]["Status"] = Fore.LIGHTCYAN_EX + "Launching" + Style.RESET_ALL
            update_status_table(package_statuses)
            launch_roblox(package_name, server_link, num_packages, package_statuses)
            package_statuses[package_name]["Status"] = Fore.GREEN + "Joined" + Style.RESET_ALL

            # Get the username for the executor check
            username = get_username(accounts[server_links.index((package_name, server_link))][1])

            # Reset the executor file before checking
            reset_executor_file(username)

        except Exception as e:
            # Handle subprocess or launch error
            print(Fore.RED + f"Error launching Roblox for {package_name}: {e}" + Style.RESET_ALL)
            package_statuses[package_name]["Status"] = Fore.RED + "Launch failed" + Style.RESET_ALL
        update_status_table(package_statuses)

    start_time = time.time()

    while True:
        current_time = time.time()

        try:
            for package_name, user_id in accounts:
                try:
                    # Retrieve the correct server_link for the package_name
                    server_link = get_server_link(package_name, server_links)
                    if not server_link:
                        package_statuses[package_name]["Status"] = Fore.RED + "Server link not found" + Style.RESET_ALL
                        update_status_table(package_statuses)
                        continue

                    # Get the username associated with the user ID or fallback to user ID
                    username = get_username_from_id(user_id)
                    presence_type, last_location_current = check_user_online(user_id)

                    package_statuses[package_name]["Username"] = username

                    if presence_type == 2:
                        package_statuses[package_name]["Status"] = Fore.GREEN + "In-Game" + Style.RESET_ALL

                        # Rejoin if the process is not running
                        if not is_roblox_running(package_name):
                            package_statuses[package_name]["Status"] = Fore.RED + "Process Crashed, Relaunching" + Style.RESET_ALL
                            kill_roblox_process(package_name)
                            time.sleep(2)
                            launch_roblox(package_name, server_link, num_packages, package_statuses)

                    else:
                        if not is_roblox_running(package_name):
                            package_statuses[package_name]["Status"] = Fore.RED + "Process Crashed, Relaunching" + Style.RESET_ALL
                            kill_roblox_process(package_name)
                            time.sleep(2)
                            launch_roblox(package_name, server_link, num_packages, package_statuses)
                        elif last_location_current == "Website":
                            package_statuses[package_name]["Status"] = Fore.RED + "On Website, Rejoining" + Style.RESET_ALL
                            kill_roblox_process(package_name)
                            time.sleep(2)
                            launch_roblox(package_name, server_link, num_packages, package_statuses)
                        else:
                            package_statuses[package_name]["Status"] = Fore.YELLOW + "Not In-Game, Recently Active" + Style.RESET_ALL

                    update_status_table(package_statuses)
                    time.sleep(25)  # Adjust the delay time as needed

                except Exception as e:
                    print(Fore.RED + f"Error during rejoin process for {package_name}: {e}" + Style.RESET_ALL)
                    package_statuses[package_name]["Status"] = Fore.RED + "General error" + Style.RESET_ALL
                    update_status_table(package_statuses)

            if current_time - start_time >= force_rejoin_interval:
                print("Force killing Roblox processes due to time limit.")
                kill_roblox_processes()
                start_time = current_time
                print(Fore.YELLOW + "Waiting for 5 seconds before starting the rejoin process..." + Style.RESET_ALL)
                time.sleep(5)
                for package_name, server_link in server_links:
                    try:
                        package_statuses[package_name]["Status"] = Fore.RED + "Rejoining" + Style.RESET_ALL
                        update_status_table(package_statuses)
                        launch_roblox(package_name, server_link, num_packages, package_statuses)

                        package_statuses[package_name]["Status"] = Fore.GREEN + "Joined" + Style.RESET_ALL
                    except Exception as e:
                        print(Fore.RED + f"Error rejoining Roblox for {package_name}: {e}" + Style.RESET_ALL)

                update_status_table(package_statuses)

            time.sleep(90)

        except Exception as e:
            print(Fore.RED + f"Critical error in auto rejoin loop: {e}" + Style.RESET_ALL)
            time.sleep(60)
            continue

elif setup_type == "2":
    accounts = []
    packages = get_roblox_packages()

    for package_name in packages:
        user_input = input(f"Enter the user ID or username for {package_name}: ")
        user_id = None

        if user_input.isdigit():
            user_id = user_input
        else:
            print(f"Retrieving user ID for username: {user_input}...")
            user_id = asyncio.run(get_user_id(user_input))
            if user_id is None:
                print(Fore.RED + "Failed to retrieve user ID. Please enter the user ID manually." + Style.RESET_ALL)
                user_id = input("Enter the user ID: ")

        accounts.append((package_name, user_id))
        print(f"Set {package_name} to user ID: {user_id}")

    save_accounts(accounts)
    save_cache()
    print(Fore.GREEN + "User IDs saved!" + Style.RESET_ALL)

    input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL)

elif setup_type == "3":
    server_link = input(Fore.CYAN + "Please Enter Game ID Or Private Server Link: " + Style.RESET_ALL)
    formatted_link = format_server_link(server_link)

    if formatted_link:
        packages = get_roblox_packages()
        server_links = [(package_name, formatted_link) for package_name in packages]
        save_server_links(server_links)
        print(Fore.GREEN + "Game ID or private server link saved successfully!" + Style.RESET_ALL)

    input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL)

elif setup_type == "4":
    packages = get_roblox_packages()
    server_links = []

    for package_name in packages:
        server_link = input(f"Enter the game ID or private server link for {package_name}: ")
        formatted_link = format_server_link(server_link)

        if formatted_link:
            server_links.append((package_name, formatted_link))

    save_server_links(server_links)

    input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL)

elif setup_type == "5":
    clear_choice = input(Fore.GREEN + "What do you want to clear?\n1. Clear User IDs\n2. Clear Server Links\n3. Clear Both\nEnter choice: " + Style.RESET_ALL)

    if clear_choice == "1":
        if os.path.exists(ACCOUNTS_FILE):
            os.remove(ACCOUNTS_FILE)
            print(Fore.GREEN + "User IDs cleared successfully!" + Style.RESET_ALL)
        else:
            print(Fore.YELLOW + f"No such file: '{ACCOUNTS_FILE}' found to clear." + Style.RESET_ALL)

    elif clear_choice == "2":
        if os.path.exists(SERVER_LINKS_FILE):
            os.remove(SERVER_LINKS_FILE)
            print(Fore.GREEN + "Server links cleared successfully!" + Style.RESET_ALL)
        else:
            print(Fore.YELLOW + f"No such file: '{SERVER_LINKS_FILE}' found to clear." + Style.RESET_ALL)

    elif clear_choice == "3":
        if os.path.exists(ACCOUNTS_FILE):
            os.remove(ACCOUNTS_FILE)
            print(Fore.GREEN + "User IDs cleared successfully!" + Style.RESET_ALL)
        else:
            print(Fore.YELLOW + f"No such file: '{ACCOUNTS_FILE}' found to clear." + Style.RESET_ALL)

        if os.path.exists(SERVER_LINKS_FILE):
            os.remove(SERVER_LINKS_FILE)
            print(Fore.GREEN + "Server links cleared successfully!" + Style.RESET_ALL)
        else:
            print(Fore.YELLOW + f"No such file: '{SERVER_LINKS_FILE}' found to clear." + Style.RESET_ALL)

    input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL)

elif setup_type == "6":
    accounts = load_accounts()
    server_links = load_server_links()

    if accounts and server_links:
        headers = ["Account", "Server", "Game ID", "Username"]
        rows = [(package, server, game_id, get_username(game_id)) for (package, game_id), (_, server) in zip(accounts, server_links)]
        create_dynamic_table(headers, rows)
    else:
        print(Fore.RED + "No accounts or server links to display." + Style.RESET_ALL)
    input(Fore.GREEN + "\nPress Enter to return to the menu..." + Style.RESET_ALL)
elif setup_type == "7":
    print(Fore.GREEN + "Auto Setup User IDs from each package's appStorage.json..." + Style.RESET_ALL)
    packages = get_roblox_packages()
    accounts = []

    for package_name in packages:
        file_path = f'/data/data/{package_name}/files/appData/LocalStorage/appStorage.json'
        user_id = find_userid_from_file(file_path)

        if user_id:
            accounts.append((package_name, user_id))
            print(f"Found UserId for {package_name}: {user_id}")
        else:
            print(Fore.RED + f"UserId not found for {package_name}. Make sure the file path is correct and the format is as expected." + Style.RESET_ALL)

    save_accounts(accounts)
    save_cache()
    print(Fore.GREEN + "User IDs saved from appStorage.json!" + Style.RESET_ALL)

    # Prompt for server link
    server_link = input(Fore.CYAN + "Please Enter Game ID Or Private Server Link: " + Style.RESET_ALL)
    formatted_link = format_server_link(server_link)

    if formatted_link:
        server_links = [(package_name, formatted_link) for package_name in packages]
        save_server_links(server_links)
        print(Fore.GREEN + "Game ID or private server link saved successfully!" + Style.RESET_ALL)
    input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL)

elif setup_type == "8":  # Auto Login via Cookie
    inject_cookies_and_appstorage()
    input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL)

elif setup_type == "9":
    setup_webhook()

elif setup_type == "10":
    global stop_webhook_thread
    stop_webhook_thread = True
    break

if __name__ == "__main__":
    load_cache()  
    main()  
    save_cache() 
