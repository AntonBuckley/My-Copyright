import os
import requests
import json
import time
import subprocess
import asyncio
import re
import aiohttp
import psutil
from colorama import init, Fore, Style

SERVER_LINKS_FILE = "AXPrivate_Server_Link.txt"
ACCOUNTS_FILE = "AXAccount.txt"

def print_header():
    os.system('cls' if os.name == 'nt' else 'clear')
    header = r"""
   _____         .__              .__         __________            __       .__        
  /  _  \ ___  __|__| ____   ____ |__|__  ___ \______   \ ____     |__| ____ |__| ____  
 /  /_\  \\  \/  /  |/  _ \ /    \|  \  \/  /  |       _// __ \    |  |/  _ \|  |/    \ 
/    |    \>    <|  (  <_> )   |  \  |>    <   |    |   \  ___/    |  (  <_> )  |   |  \
\____|__  /__/\_ \__|\____/|___|  /__/__/\_ \  |____|_  /\___  >\__|  |\____/|__|___|  /
        \/      \/              \/         \/         \/     \/\______|              \/           
"""
    print(Fore.LIGHTCYAN_EX + header + Style.RESET_ALL)
        
def get_roblox_packages():
    packages = []
    suffixes = 'qwertyuiopasdfghjklzxcvbnm'
    
    try:
        output = subprocess.check_output("pm list packages", shell=True, text=True)
    except subprocess.CalledProcessError:
        print(Fore.RED + "An Error Occurred While Searching For Package On Your Device!" + Style.RESET_ALL)
        return packages

    for suffix in suffixes:
        package_name = f"com.roblox.clien{suffix}"
        if package_name in output:
            print(Fore.GREEN + f"Package Found: {package_name}" + Style.RESET_ALL)
            packages.append(package_name)

    return packages

def kill_roblox_process(package_name):
    for proc in psutil.process_iter(['name']):
        if package_name in proc.info['name']:
            proc.kill()
            print(Fore.YELLOW + f"Roblox Game Shutdown In Progress For Package Is: {package_name}" + Style.RESET_ALL)

def launch_roblox(package_name, server_link, num_packages):
    try:
        splash_activity = f'{package_name}/com.roblox.client.startup.ActivitySplash'
        protocol_launch_activity = f'{package_name}/com.roblox.client.ActivityProtocolLaunch'
        wait_time = 15 if num_packages >= 6 else 5
        
        print(f"Opening Roblox for {package_name}...")
        subprocess.run(['am', 'start', '-n', splash_activity, '-d', server_link], 
                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(wait_time)

        print(Fore.YELLOW + f"In Progress Into Roblox Game For Package Is: {package_name}..." + Style.RESET_ALL)
        subprocess.run(['am', 'start', '-n', protocol_launch_activity, '-d', server_link], 
                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(20)

    except subprocess.CalledProcessError as e:
        print(Fore.RED + f"An Error Occurred While Opening Roblox Game For Package Is: {package_name}, Status Code Is: {e}" + Style.RESET_ALL)

def format_server_link(input_link):
    if 'roblox.com' in input_link:
        return input_link
    elif re.match(r'^\d+$', input_link):
        return f'roblox://placeID={input_link}'
    else:
        print(Fore.RED + "Invalid Input! Please Enter Valid Game ID Or Private Server Link!" + Style.RESET_ALL)
        return None

def save_data(data, file):
    with open(file, "w") as f:
        for entry in data:
            f.write(",".join(entry) + "\n")

def load_data(file):
    data = []
    if os.path.exists(file):
        with open(file, "r") as f:
            for line in f:
                data.append(tuple(line.strip().split(",", 1)))
    return data

async def get_user_id(username):
    url = "https://users.roblox.com/v1/usernames/users"
    payload = {"usernames": [username], "excludeBannedUsers": True}
    headers = {"Content-Type": "application/json"}

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as response:
            data = await response.json()
            return data['data'][0]['id'] if 'data' in data and data['data'] else None

def get_username(user_id):
    url = f"https://users.roblox.com/v1/users/{user_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return data.get("name", "Unknown")
    except Exception as e:
        print(f"Error retrieving username for ID {user_id}: {e}")
        return None

def check_user_online(user_id):
    url = "https://presence.roblox.com/v1/presence/users"
    headers = {'Content-Type': 'application/json'}
    body = json.dumps({"userIds": [user_id]})
    try:
        response = requests.post(url, headers=headers, data=body)
        response.raise_for_status()
        data = response.json()
        return data["userPresences"][0]["userPresenceType"]
    except Exception as e:
        print(Fore.RED + f"Error checking user online status: {e}" + Style.RESET_ALL)
        return None

async def auto_rejoin(accounts, server_links, interval):
    num_packages = len(server_links)
    start_time = time.time()
    
    while True:
        tasks = []
        for package_name, user_id in accounts:
            if not user_id.isdigit():
                print(f"Retrieving user ID for {user_id}...")
                user_id = await get_user_id(user_id)
            
            username = get_username(user_id)
            presence_type = check_user_online(user_id)

            if presence_type == 2:
                print(Fore.GREEN + f"{username} ({user_id}) is in-game." + Style.RESET_ALL)
            else:
                print(Fore.RED + f"{username} ({user_id}) is offline, rejoining..." + Style.RESET_ALL)
                kill_roblox_process(package_name)
                launch_roblox(package_name, server_links[0][1], num_packages)

        await asyncio.sleep(interval)

        if time.time() - start_time >= interval:
            print("Force rejoining due to interval.")
            for package_name, _ in server_links:
                kill_roblox_process(package_name)
                launch_roblox(package_name, server_links[0][1], num_packages)
            start_time = time.time()

# Main Function
def main():
    print_header()
    
    while True:
        setup_type = input(Fore.GREEN + "Choose Your Setup:\n1. Start Auto Rejoin Roblox Game\n2. Set User ID For Each Package\n3. Same Game ID Or Private Server Link\n4. Different Private Server Or Game ID\n5. Clear User ID And/Or Private Server Link\n6. List\n7. Auto Setup User ID\n8. Exit\nEnter Your Choice: " + Style.RESET_ALL)

        if setup_type == "1":
            accounts = load_data(ACCOUNTS_FILE)
            server_links = load_data(SERVER_LINKS_FILE)
            
            if not accounts or not server_links:
                print(Fore.RED + "Set up User IDs or Server Links first!" + Style.RESET_ALL)
                continue

            force_rejoin_interval = int(input(Fore.CYAN + "Enter rejoin interval (minutes): " + Style.RESET_ALL)) * 60
            asyncio.run(auto_rejoin(accounts, server_links, force_rejoin_interval))

        elif setup_type == "2":
            packages = get_roblox_packages()
            accounts = []
            
            for package_name in packages:
                user_input = input(f"Enter the user ID or username for {package_name}: ")
                user_id = asyncio.run(get_user_id(user_input)) if not user_input.isdigit() else user_input
                accounts.append((package_name, user_id))
            
            save_data(accounts, ACCOUNTS_FILE)
            print(Fore.GREEN + "User IDs saved!" + Style.RESET_ALL)

        elif setup_type == "3":
            server_link = input(Fore.CYAN + "Enter Game ID or Private Server Link: " + Style.RESET_ALL)
            formatted_link = format_server_link(server_link)

            if formatted_link:
                packages = get_roblox_packages()
                server_links = [(pkg, formatted_link) for pkg in packages]
                save_data(server_links, SERVER_LINKS_FILE)
                print(Fore.GREEN + "Links saved!" + Style.RESET_ALL)

        elif setup_type == "4":
            packages = get_roblox_packages()
            server_links = []

            for package_name in packages:
                server_link = input(f"Enter Private Server Link or Game ID for {package_name}: ")
                formatted_link = format_server_link(server_link)
                
                if formatted_link:
                    server_links.append((package_name, formatted_link))
            
            save_data(server_links, SERVER_LINKS_FILE)
            print(Fore.GREEN + "Private Server Links saved!" + Style.RESET_ALL)

        elif setup_type == "5":
            clear_choice = input(Fore.CYAN + "1. Clear User ID\n2. Clear Private Server Link\nEnter Your Choice: " + Style.RESET_ALL)
            
            if clear_choice == "1":
                os.remove(ACCOUNTS_FILE)
                print(Fore.RED + "User IDs cleared!" + Style.RESET_ALL)
            elif clear_choice == "2":
                os.remove(SERVER_LINKS_FILE)
                print(Fore.RED + "Server Links cleared!" + Style.RESET_ALL)

        elif setup_type == "6":
            accounts = load_data(ACCOUNTS_FILE)
            server_links = load_data(SERVER_LINKS_FILE)
            print(Fore.GREEN + "Accounts: " + Style.RESET_ALL)
            print(accounts)
            print(Fore.GREEN + "Server Links: " + Style.RESET_ALL)
            print(server_links)

        elif setup_type == "7":
            print(Fore.YELLOW + "Auto Setup User IDs not implemented yet." + Style.RESET_ALL)

        elif setup_type == "8":
            print(Fore.CYAN + "Exiting..." + Style.RESET_ALL)
            break

if __name__ == "__main__":
    main()
